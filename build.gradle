plugins {
    id 'io.freefair.lombok' version '6.1.0' apply false
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
    id 'org.jenkins-ci.jpi' version '0.47.0' apply false
    id 'com.palantir.git-version' version '0.12.3' apply false
}

allprojects {
    apply plugin: 'com.palantir.git-version'
    ext {
        buildTimestamp = "${Instant.now().toString()}"
        versionDetails = versionDetails()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'idea'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    group = "${rootGroup}"

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.jenkins-ci.org/releases/' }
        maven { url 'https://download.jetbrains.com/teamcity-repository/' }
    }

    dependencies {
        // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
        // Enable Slf4J log facade
        implementation "org.slf4j:slf4j-api:$slf4jVersion"

        // Use JUnit 5 for tests and fixtures
        testImplementation(platform("org.junit:junit-bom:$junitVersion"))
        testFixturesImplementation(platform("org.junit:junit-bom:$junitVersion"))
        testImplementation('org.junit.jupiter:junit-jupiter')
        testFixturesImplementation('org.junit.jupiter:junit-jupiter')

        // Enable Slf4J log for tests and test fixtures
        testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
        testFixturesImplementation "org.slf4j:slf4j-api:$slf4jVersion"
        // ... and use JUL provider for them
        testImplementation "org.slf4j:slf4j-jdk14:$slf4jVersion"
        testFixturesImplementation "org.slf4j:slf4j-jdk14:$slf4jVersion"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task testsJar(type: Jar, dependsOn: testClasses) {
        archiveClassifier = 'tests'
        from sourceSets.test.output
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        // OpenAPI-generated files contain some javadoc issues, let's ignore them
        // Also delomboked files are also generate warnings
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    jar {
        manifest.attributes['Implementation-Version'] = project.version
        manifest.attributes['Build-Time'] = buildTimestamp
        manifest.attributes['Implementation-Vendor-Id'] = rootGroup
        manifest.attributes['Implementation-Git-Hash'] = versionDetails.gitHash
        manifest.attributes['Implementation-Git-Hash-Full'] = versionDetails.gitHashFull
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                artifact testsJar

                suppressPomMetadataWarningsFor('testFixturesApiElements')
                suppressPomMetadataWarningsFor('testFixturesRuntimeElements')

                pom {
                    name = project.name
                    packaging = 'jar'
                    inceptionYear = '2018'
                    url = 'https://www.ptsecurity.com/ww-en/products/ai/'
                    description = project.description

                    scm {
                        url = 'https://github.com/ZhukovAN/ptaiPlugins'
                        connection = 'scm:git:https://github.com/ZhukovAN/ptaiPlugins.git'
                        developerConnection = 'scm:git:https://github.com/ZhukovAN/ptaiPlugins.git'
                    }

                    developers {
                        developer {
                            id = 'ZhukovAN'
                            name = 'Alexey Zhukov'
                            email = 'alexey.n.zhukov@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            mavenLocal()
        }
    }

    test {
        useJUnitPlatform() {
            excludeTags 'integration', 'development'
        }
    }

    task integrationScanTest(type: Test) {
        useJUnitPlatform {
            includeTags 'integration & scan'
            excludeTags 'slow', 'jenkins'
        }
        shouldRunAfter test
    }

    task integrationFastTest(type: Test) {
        useJUnitPlatform {
            includeTags 'integration'
            excludeTags 'slow', 'scan', 'jenkins'
        }
        shouldRunAfter = [ "test" ]
    }

    task integrationJenkinsTest(type: Test) {
        useJUnitPlatform {
            includeTags 'jenkins'
        }
        shouldRunAfter = [ "test" ]
    }

    task integrationSlowTest(type: Test) {
        useJUnitPlatform {
            includeTags 'slow'
        }
        shouldRunAfter = [ "test" ]
    }
}

wrapper {
    gradleVersion = '7.1'
}
