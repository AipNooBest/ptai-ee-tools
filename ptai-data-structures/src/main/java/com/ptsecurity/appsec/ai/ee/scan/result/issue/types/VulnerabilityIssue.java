package com.ptsecurity.appsec.ai.ee.scan.result.issue.types;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;
import lombok.experimental.SuperBuilder;

import java.util.List;

@Getter
@Setter
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
public class VulnerabilityIssue extends BaseSourceIssue {
    public enum ScanMode {
        NONE, FROM_ENTRYPOINT, FROM_PUBLICPROTECTED, FROM_OTHER, TAINT, UNKNOWN
    }

    /**
     * Scan mode that resulted this issue
     */
    @JsonProperty("scanMode")
    protected ScanMode scanMode;

    @Getter
    @Setter
    @SuperBuilder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class BestPlaceToFix {
        @JsonProperty("place")
        protected Place place;
    }

    /**
     * This vulnerability BPF
     */
    @JsonProperty("bpf")
    protected BestPlaceToFix bpf;

    /**
     * Additional conditions that are to be met for this
     * vulnerability to be exploitable
     */
    @JsonProperty("conditions")
    protected String conditions;

    /**
     * Code point where application starts untrusted data processing
     */
    @JsonProperty("entryPoint")
    protected Place entryPoint;

    /**
     * Code point where application reads taint data from untrusted input
     */
    @JsonProperty("taintDataEntries")
    protected List<Place> taintDataEntries;

    /**
     * Code points where application sequentially processes taint data
     */
    @JsonProperty("dataTrace")
    protected List<Place> dataTrace;

    /**
     * Name of potentially vulnerable function. Vulnerability
     * exploitation changes this function execution logic using taint data
     */
    @JsonProperty("pvf")
    protected String pvf;

    /**
     * Code point where PVF is being called with taint data
     */
    @JsonProperty("vulnerableExpression")
    protected Place vulnerableExpression;

    @JsonProperty("secondOrder")
    protected Boolean secondOrder;
}
