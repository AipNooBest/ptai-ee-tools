plugins {
    id 'org.jenkins-ci.jpi'
}

group = "${rootGroup}.ptai-jenkins-plugin"
description = 'This plugin used to implement AST using PT Application Inspector'
version = "${version}-${buildTimestamp}"

ext {
    // Just placeholders for dependencies / test Jenkins
    // plugin versions. Actual versions are calculated
    // in processJenkinsVersion function
    tokenMacroVersion = ''
    credentialsVersion = ''
    structsVersion = ''
    workflowStepApiVersion = ''
    scmApiVersion = ''
    trileadApiVersion = ''
    scriptSecurityVersion = ''
    gitVersion = ''
}

jenkinsPlugin {
    // version of Jenkins core this plugin depends on, must be 1.420 or later
    jenkinsVersion = findProperty('jenkinsVersion')

    // ID of the plugin, defaults to the project name without trailing '-plugin'
    shortName = 'ptai-jenkins-plugin'

    // human-readable name of plugin
    displayName = 'PT Application Inspector Jenkins plugin'

    // URL for plugin on Jenkins wiki or elsewhere
    url = 'https://www.ptsecurity.com/ww-en/products/ai/'

    // plugin URL on GitHub, optional
    gitHubUrl = 'https://github.com/PositiveTechnologies/ptaiPlugins'

    // use the plugin class loader before the core class loader, defaults to false
    // pluginFirstClassLoader = true

    // optional list of package prefixes that your plugin doesn't want to see from core
    // maskClasses = 'groovy.grape org.apache.commons.codec'

    // optional version number from which this plugin release is configuration-compatible
    // compatibleSinceVersion = '1.1.0'

    // set the directory from which the development server will run, defaults to 'work'
    // workDir = file('/tmp/jenkins')

    // URL used to deploy the plugin, defaults to the value shown
    // the system property 'jpi.repoUrl' can be used to override this option
    // repoUrl = 'https://repo.jenkins-ci.org/releases'

    // URL used to deploy snapshots of the plugin, defaults to the value shown
    // the system property 'jpi.snapshotRepoUrl' can be used to override this option
    // snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    // enable injection of additional tests for checking the syntax of Jelly and other things
    // disabledTestInjection = false

    // the output directory for the localizer task relative to the project root, defaults to the value shown
    // localizerOutputDir = "${project.buildDir}/generated-src/localizer"

    // disable configuration of Maven Central, the local Maven cache and the Jenkins Maven repository, defaults to true
    // configureRepositories = false

    // skip configuration of publications and repositories for the Maven Publishing plugin, defaults to true
    // configurePublishing = false

    // plugin file extension, either 'jpi' or 'hpi', defaults to 'hpi'
    fileExtension = 'hpi'

    // the developers section is optional, and corresponds to the POM developers section
    developers {
        developer {
            id 'ZhukovAN'
            name 'Alexey Zhukov'
            email 'alexey.n.zhukov@gmail.com'
        }
    }

    // the licenses section is optional, and corresponds to the POM licenses section
    licenses {
        license {
            name 'Apache License, Version 2.0'
            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
            comments 'A business-friendly OSS license'
        }
    }
}

configurations {
    webjars
}

dependencies {
    api project(':generic-client-lib')
    testImplementation(testFixtures(project(':generic-client-lib')))

    processJenkinsVersion()
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/token-macro
    implementation "org.jenkins-ci.plugins:token-macro:${tokenMacroVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/credentials
    implementation "org.jenkins-ci.plugins:credentials:${credentialsVersion}"

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/token-macro
    jenkinsServer "org.jenkins-ci.plugins:token-macro:${tokenMacroVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/credentials
    jenkinsServer "org.jenkins-ci.plugins:credentials:${credentialsVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/structs
    jenkinsServer "org.jenkins-ci.plugins:structs:${structsVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins.workflow/workflow-step-api
    jenkinsServer "org.jenkins-ci.plugins.workflow:workflow-step-api:${workflowStepApiVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/scm-api
    jenkinsServer "org.jenkins-ci.plugins:scm-api:${scmApiVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/trilead-api
    jenkinsServer "org.jenkins-ci.plugins:trilead-api:${trileadApiVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/script-security
    jenkinsServer "org.jenkins-ci.plugins:script-security:${scriptSecurityVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/git
    jenkinsServer "org.jenkins-ci.plugins:git:${gitVersion}"

    // https://mvnrepository.com/artifact/org.webjars/echarts
    webjars 'org.webjars:echarts:5.0.2'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    // https://mvnrepository.com/artifact/commons-validator/commons-validator
    implementation 'commons-validator:commons-validator:1.6'
}

def processJenkinsVersion() {
    String versionString = findProperty('jenkinsVersion')
    if (!versionString) {
        logger.quiet("Jenkins version is not defined, using 2.164.3 as default")
        versionString = '2.164.3'
    }
    def versionMatcher = versionString =~ /(\d+)\.(\d+)\.(\d+)/
    if (!versionMatcher.matches()) {
        versionMatcher = versionString =~ /(\d+)\.(\d+)/
        if (!versionMatcher.matches()) throw new GradleException("Jenkins version syntax incorrect: failed to parse $versionString")
    }
    def version = [versionMatcher.group(1).toInteger(), versionMatcher.group(2).toInteger()]
    if (2 != version[0]) throw new GradleException("Jenkins versions 2.xxx.y are supported only")
    if (150 > version[1]) throw new GradleException("Jenkins versions 2.150 and upper are supported only")

    // Calculate structs-plugin version. For Jenkins 2.107.3 version 1.21 is to be used, for 2.222.4 - 1.22
    if (222 <= version[1])
        structsVersion = '1.22'
    else
        structsVersion = '1.21'
    // workflow-step-api: 2.22 -> 2.138, 2.23 -> 2.176
    if (176 <= version[1])
        workflowStepApiVersion = '2.23'
    else
        workflowStepApiVersion = '2.22'
    // token-macro: 2.14 -> 2.274, 2.13 -> 2.222, 2.12 -> 2.121
    if (274 <= version[1])
        tokenMacroVersion = '2.14'
    else if (222 <= version[1])
        tokenMacroVersion = '2.13'
    else
        tokenMacroVersion = '2.12'
    // credentials: 2.3.12 -> 2.222.4, 2.3.11 -> 2.138
    if (222 <= version[1])
        credentialsVersion = '2.3.12'
    else
        credentialsVersion = '2.3.11'
    // scm-api: 2.6.4 -> 2.176.4, 2.6.2 -> 2.164.3, 2.4.1 -> 2.60.3
    if (176 <= version[1])
        scmApiVersion = '2.6.4'
    else if (164 <= version[1])
        scmApiVersion = '2.6.2'
    else
        scmApiVersion = '2.4.1'
    // trilead-api: 1.0.13 -> 2.204, 1.0.10 -> 2.184, 1.0.3 -> 2.150.1
    if (204 <= version[1])
        trileadApiVersion = '1.0.13'
    else if (184 <= version[1])
        trileadApiVersion = '1.0.10'
    else
        trileadApiVersion = '1.0.3'
    // script-security: 1.77 -> 2.222.4, 1.76 -> 2.176.4, 1.71 -> 2.60.3
    if (222 <= version[1])
        scriptSecurityVersion = '1.77'
    else if (176 <= version[1])
        scriptSecurityVersion = '1.76'
    else
        scriptSecurityVersion = '1.71'
    // git: 4.7.2 -> 2.263.1, 4.6.0 -> 2.222.4, 4.4.5 -> 2.204.1, 4.2.2 -> 2.138.4
    if (263 <= version[1])
        gitVersion = '4.7.2'
    else if (222 <= version[1])
        gitVersion = '4.6.0'
    else if (204 <= version[1])
        gitVersion = '4.4.5'
    else
        gitVersion = '4.2.2'

    boolean newUi = 277 <= version[1]
    if (newUi)
        sourceSets.main.resources.srcDirs += [ 'src/main/resources-taglib-2-277+' ]
    else
        sourceSets.main.resources.srcDirs += [ 'src/main/resources-taglib-2-277-' ]
    logger.info("Using token-macro plugin v.$tokenMacroVersion")
    logger.info("Using credentials plugin v.$credentialsVersion")
}

// Set Jenkins server debug port
tasks.named('server').configure {
    execSpec {
        debugOptions {
            port.set(8000)
            suspend.set(false)
        }
    }
}

def unpackWebJars = tasks.register('unpack-webjars') {
    doLast {
        // Iterate through JARs from "webjars" configuration
        configurations.webjars.each {jar ->
            def config = configurations.webjars.resolvedConfiguration
            def artifact = config.resolvedArtifacts.find {
                it.file.toString() == jar.absolutePath
            }

            def upStreamVersion = "${artifact.moduleVersion.id.version}"
            upStreamVersion = upStreamVersion.replaceAll(/(-[\d.-]+)/, '')

            def innerJar = "${buildDir}/webjars-content/${artifact.name}"
            logger.quiet("Extracting webjar contents from ${innerJar}")

            copy {
                from zipTree(jar)
                into file("${innerJar}")
            }

            // As webjar contents is a 3rd party code, it's better to avoid putting it
            // to sources / resources folders as files in those folders are pushed to repository.
            // So the best way would be to copy webjar contents to something
            // like $buildDir/generated-resources/webapp and setup JPI task as:
            // tasks.getByName('jpi') {
            //    dependsOn unpackWebJars
            //    from "$buildDir/generated-resources/webapp"
            // }
            // This approach allows us to create HPI file that contains both custom code
            // from src/main/webapp directory and webjars from generated-resources. But
            // Gradle JPI plugin 'server' task generates HPL file that points strictly
            // to webapp folder so Jenkins server started in debug mode using 'gradlew server'
            // command can see only the files from webapp and lacks ones from other folders
            // like generated-sources. So the only solution here is to unpack webjar
            // contents (i.e. JS, CSS, etc.) to webapp/webjars folder and add that folder to .github.
            copy {
                from "${innerJar}/META-INF/resources/webjars/${artifact.name}/${upStreamVersion}",
                        "${innerJar}/META-INF/resources/webjars/${artifact.name}/${artifact.moduleVersion.id.version}"

                into "src/main/webapp/webjars/${artifact.name}"
            }
        }
    }
}

tasks.getByName('jpi') {
    dependsOn unpackWebJars
}

clean {
    delete 'src/main/webapp/webjars'
}

