plugins {
    id 'org.jenkins-ci.jpi'
}

group = "${rootGroup}.ptai-jenkins-plugin"
description = 'This plugin used to implement AST using PT Application Inspector'
version = "${version}-${buildTimestamp}"

ext {
    tokenMacroVersion = '2.13'
    credentialsVersion = '2.3.14'
}

jenkinsPlugin {
    // version of Jenkins core this plugin depends on, must be 1.420 or later
    jenkinsVersion = findProperty('jenkinsVersion')

    // ID of the plugin, defaults to the project name without trailing '-plugin'
    shortName = 'ptai-jenkins-plugin'

    // human-readable name of plugin
    displayName = 'PT Application Inspector Jenkins plugin'

    // URL for plugin on Jenkins wiki or elsewhere
    url = 'https://www.ptsecurity.com/ww-en/products/ai/'

    // plugin URL on GitHub, optional
    gitHubUrl = 'https://github.com/PositiveTechnologies/ptaiPlugins'

    // use the plugin class loader before the core class loader, defaults to false
    // pluginFirstClassLoader = true

    // optional list of package prefixes that your plugin doesn't want to see from core
    // maskClasses = 'groovy.grape org.apache.commons.codec'

    // optional version number from which this plugin release is configuration-compatible
    // compatibleSinceVersion = '1.1.0'

    // set the directory from which the development server will run, defaults to 'work'
    // workDir = file('/tmp/jenkins')

    // URL used to deploy the plugin, defaults to the value shown
    // the system property 'jpi.repoUrl' can be used to override this option
    // repoUrl = 'https://repo.jenkins-ci.org/releases'

    // URL used to deploy snapshots of the plugin, defaults to the value shown
    // the system property 'jpi.snapshotRepoUrl' can be used to override this option
    // snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    // enable injection of additional tests for checking the syntax of Jelly and other things
    // disabledTestInjection = false

    // the output directory for the localizer task relative to the project root, defaults to the value shown
    // localizerOutputDir = "${project.buildDir}/generated-src/localizer"

    // disable configuration of Maven Central, the local Maven cache and the Jenkins Maven repository, defaults to true
    // configureRepositories = false

    // skip configuration of publications and repositories for the Maven Publishing plugin, defaults to true
    // configurePublishing = false

    // plugin file extension, either 'jpi' or 'hpi', defaults to 'hpi'
    fileExtension = 'hpi'

    // the developers section is optional, and corresponds to the POM developers section
    developers {
        developer {
            id 'ZhukovAN'
            name 'Alexey Zhukov'
            email 'alexey.n.zhukov@gmail.com'
        }
    }

    // the licenses section is optional, and corresponds to the POM licenses section
    licenses {
        license {
            name 'Apache License, Version 2.0'
            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
            comments 'A business-friendly OSS license'
        }
    }
}

dependencies {
    api project(':generic-client-lib')
    testImplementation(testFixtures(project(':generic-client-lib')))

    processJenkinsVersion()
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/token-macro
    implementation "org.jenkins-ci.plugins:token-macro:${tokenMacroVersion}"
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/credentials
    implementation "org.jenkins-ci.plugins:credentials:${credentialsVersion}"

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.11'
    // https://mvnrepository.com/artifact/commons-validator/commons-validator
    implementation 'commons-validator:commons-validator:1.6'
}

def processJenkinsVersion() {
    String versionString = findProperty('jenkinsVersion')
    if (!versionString) {
        logger.quiet("Jenkins version is not defined, using 2.164.3 as default")
        versionString = '2.164.3'
    }
    def versionMatcher = versionString =~ /(\d+)\.(\d+)\.(\d+)/
    if (!versionMatcher.matches()) {
        versionMatcher = versionString =~ /(\d+)\.(\d+)/
        if (!versionMatcher.matches()) throw new GradleException("Jenkins version syntax incorrect: failed to parse $versionString")
    }
    def version = [versionMatcher.group(1).toInteger(), versionMatcher.group(2).toInteger()]
    if (2 != version[0]) throw new GradleException("Jenkins versions 2.xxx.y are supported only")

    boolean newUi = 277 <= version[1]
    if (222 <= version[1]) {
        // https://updates.jenkins-ci.org/download/plugins/token-macro/2.13/token-macro.hpi
        tokenMacroVersion = '2.13'
        // https://updates.jenkins-ci.org/download/plugins/credentials/2.3.14/credentials.hpi
        credentialsVersion = '2.3.14'
    } else {
        // https://updates.jenkins-ci.org/download/plugins/token-macro/2.11/token-macro.hpi
        // https://updates.jenkins-ci.org/download/plugins/workflow-step-api/2.14/workflow-step-api.hpi
        tokenMacroVersion = '2.11'
        // https://updates.jenkins-ci.org/download/plugins/credentials/2.3.11/credentials.hpi
        credentialsVersion = '2.3.11'
    }
    if (newUi)
        sourceSets.main.resources.srcDirs += [ 'src/main/resources-taglib-2-277+' ]
    else
        sourceSets.main.resources.srcDirs += [ 'src/main/resources-taglib-2-277-' ]
    logger.info("Using token-macro plugin v.$tokenMacroVersion")
    logger.info("Using credentials plugin v.$credentialsVersion")
}

tasks.named('server').configure {
    execSpec {
        debugOptions {
            port.set(8000)
            suspend.set(false)
        }
    }
}