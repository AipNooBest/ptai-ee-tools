package com.ptsecurity.appsec.ai.ee.utils.ci.integration.report;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ptsecurity.appsec.ai.ee.scan.reports.Reports;
import com.ptsecurity.appsec.ai.ee.scan.result.ScanBrief.ApiVersion;
import com.ptsecurity.appsec.ai.ee.scan.result.ScanResult;
import com.ptsecurity.appsec.ai.ee.scan.result.issue.types.BaseIssue;
import com.ptsecurity.appsec.ai.ee.utils.ci.integration.report.chart.model.VulnerabilityLevelBar;
import com.ptsecurity.misc.tools.BaseTest;
import com.ptsecurity.misc.tools.helpers.BaseJsonHelper;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.ptsecurity.appsec.ai.ee.utils.ci.integration.Project.JAVA_OWASP_BENCHMARK;
import static com.ptsecurity.misc.tools.helpers.ArchiveHelper.extractResourceFile;
import static com.ptsecurity.misc.tools.helpers.BaseJsonHelper.createObjectMapper;

@DisplayName("Test vulnerability bar charts")
public class VulnerabilityDistributionTest extends BaseTest {
    @Getter
    @RequiredArgsConstructor
    protected static class Triple {
        protected final BaseIssue.Level level;
        protected final String title;
        protected final Long count;
    }

    @SneakyThrows
    @Test
    @DisplayName("Convert ScanResult to vulnerability type distribution bar chart")
    public void vulnerabilityTypeGraph() {
        ObjectMapper mapper = createObjectMapper();
        for (ApiVersion version : ApiVersion.values()) {
            if (version.isDeprecated()) continue;
            Path scanResultFile = extractResourceFile("json/scan/result/" + version.name().toLowerCase() + "/" + JAVA_OWASP_BENCHMARK.getName() + ".json.7z");
            ScanResult scanResult = mapper.readValue(scanResultFile.toFile(), ScanResult.class);

            Map<org.apache.commons.lang3.tuple.Pair<BaseIssue.Level, String>, Long> distribution = scanResult.getIssues().stream()
                    .collect(Collectors.groupingBy(
                            issue -> new ImmutablePair<>(issue.getLevel(), scanResult.getI18n().get(issue.getIssueTypeKey()).get(Reports.Locale.EN).getTitle()),
                            Collectors.counting()));
            Comparator<Triple> compareLevelAndCount = Comparator
                    .comparing(Triple::getLevel, Comparator.comparingInt(BaseIssue.Level::getValue).reversed())
                    .thenComparing(Triple::getCount, Comparator.reverseOrder());
            //.thenComparing(Triple::getCount).reversed();
            List<Triple> distributionList = new ArrayList<>();

            for (org.apache.commons.lang3.tuple.Pair<BaseIssue.Level, String> key : distribution.keySet())
                distributionList.add(new Triple(key.getLeft(), key.getRight(), distribution.get(key)));

            VulnerabilityLevelBar.Series series = VulnerabilityLevelBar.Series.builder().type("bar").build();
            VulnerabilityLevelBar bar = VulnerabilityLevelBar.builder().build();
            bar.getSeries().add(series);

            distributionList.stream().sorted(compareLevelAndCount).forEach(t -> {
                bar.getYaxis().getData().add(t.title);
                series.getData().add(VulnerabilityLevelBar.DataItem.builder()
                        .value(t.count)
                        .itemStyle(VulnerabilityLevelBar.ITEM_STYLE_MAP.get(t.level))
                        .build());
            });
            System.out.println(BaseJsonHelper.serialize(bar));
        }
    }

    @Getter
    @RequiredArgsConstructor
    protected static class Pair {
        protected final BaseIssue.Level level;
        protected final Long count;
    }

    @SneakyThrows
    @Test
    @DisplayName("Convert ScanResult to vulnerability level distribution bar chart")
    public void vulnerabilityLevelGraph() {
        ObjectMapper mapper = createObjectMapper();
        for (ApiVersion version : ApiVersion.values()) {
            if (version.isDeprecated()) continue;
            Path scanResultFile = extractResourceFile("json/scan/result/" + version.name().toLowerCase() + "/" + JAVA_OWASP_BENCHMARK.getName() + ".json.7z");
            ScanResult scanResult = mapper.readValue(scanResultFile.toFile(), ScanResult.class);

            Map<BaseIssue.Level, Long> distribution = scanResult.getIssues().stream()
                    .collect(Collectors.groupingBy(
                            BaseIssue::getLevel,
                            Collectors.counting()));
            Comparator<Pair> compareLevelAndCount = Comparator
                    .comparing(Pair::getLevel, Comparator.comparingInt(BaseIssue.Level::getValue).reversed())
                    .thenComparing(Pair::getCount, Comparator.reverseOrder());
            //.thenComparing(Triple::getCount).reversed();
            List<Pair> distributionList = new ArrayList<>();

            for (BaseIssue.Level key : distribution.keySet())
                distributionList.add(new Pair(key, distribution.get(key)));

            VulnerabilityLevelBar.Series series = VulnerabilityLevelBar.Series.builder().type("bar").build();
            VulnerabilityLevelBar bar = VulnerabilityLevelBar.builder().build();
            bar.getSeries().add(series);

            distributionList.stream().sorted(compareLevelAndCount).forEach(t -> {
                bar.getYaxis().getData().add(t.level.name());
                series.getData().add(VulnerabilityLevelBar.DataItem.builder()
                        .value(t.count)
                        .itemStyle(VulnerabilityLevelBar.ITEM_STYLE_MAP.get(t.level))
                        .build());
            });
            System.out.println(BaseJsonHelper.serialize(bar));
        }
    }
}
