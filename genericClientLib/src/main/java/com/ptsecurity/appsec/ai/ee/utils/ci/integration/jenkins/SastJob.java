package com.ptsecurity.appsec.ai.ee.utils.ci.integration.jenkins;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ptsecurity.appsec.ai.ee.utils.ci.integration.jenkins.exceptions.JenkinsClientException;
import com.ptsecurity.appsec.ai.ee.utils.ci.integration.jenkins.exceptions.JenkinsServerException;
import com.ptsecurity.appsec.ai.ee.utils.ci.integration.jenkins.utils.ApiClient;
import com.ptsecurity.appsec.ai.ee.utils.ci.integration.ptaiserver.domain.PtaiResultStatus;
import com.ptsecurity.appsec.ai.ee.utils.ci.jenkins.server.ApiException;
import com.ptsecurity.appsec.ai.ee.utils.ci.jenkins.server.rest.DefaultCrumbIssuer;
import com.ptsecurity.appsec.ai.ee.utils.ci.jenkins.server.rest.FreeStyleBuild;
import com.ptsecurity.appsec.ai.ee.utils.ci.jenkins.server.rest.FreeStyleProject;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import org.apache.commons.lang3.StringUtils;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

public class SastJob extends Client {
    @Getter
    @Setter
    protected String jobName;
    @Getter
    @Setter
    protected String projectName;
    @Getter
    @Setter
    protected String nodeName;

    public String testSastJob() throws JenkinsServerException {
        String jobName = ApiClient.convertJobName(this.jobName);
        try {
            FreeStyleProject prj = this.jenkinsApi.getJob(jobName);
            return prj.getDisplayName();
        } catch (ApiException e) {
            log(e);
            throw new JenkinsServerException(e.getMessage(), e);
        }
    }

    public PtaiResultStatus execute(String reportFolderName) throws JenkinsClientException, JenkinsServerException {
        try {
            // Autogenerated Jenkins API does not support folders so we need to
            // hack job name
            if (StringUtils.isEmpty(this.jobName))
                throw new JenkinsClientException("Job name is not set");
            String jobName = ApiClient.convertJobName(this.jobName);
            FreeStyleProject prj = this.jenkinsApi.getJob(jobName);
            Integer buildNumber = prj.getNextBuildNumber();
            JenkinsJsonParameter params = new JenkinsJsonParameter();
            params.add("PTAI_PROJECT_NAME", this.projectName);
            params.add("PTAI_NODE_NAME", this.nodeName);
            ObjectMapper objectMapper = new ObjectMapper();
            // Try to get crumb
            com.ptsecurity.appsec.ai.ee.utils.ci.jenkins.server.ApiResponse<DefaultCrumbIssuer> crumb;
            try {
                crumb = jenkinsApi.getCrumbWithHttpInfo();
                this.log("Crumb: %s\r\n", crumb.getData().toString());
            } catch (ApiException e) {
                this.log("No CSRF token issued\r\n");
                log(e);
                crumb = null;
            }
            // Start SAST job
            if (null != crumb)
                jenkinsApi.postJobBuild(jobName, objectMapper.writeValueAsString(params), null, crumb.getData().getCrumb());
            else
                jenkinsApi.postJobBuild(jobName, objectMapper.writeValueAsString(params), null, null);
            FreeStyleBuild sastBuild = null;
            do {
                try {
                    // There may be a situation where build is not started yet, so we'll get an "not found" exception
                    sastBuild = jenkinsApi.getJobBuild(jobName, buildNumber.toString());
                    if (null != sastBuild) {
                        this.log("Job %s started\r\n", this.jobName);
                        break;
                    } else
                        throw new JenkinsClientException("SAST job build is null");
                } catch (ApiException e) {
                    if (404 == e.getCode()) {
                        this.log("Wait 5 seconds for %s job to start\r\n", this.jobName);
                        Thread.sleep(5000);
                        continue;
                    }
                    this.log("%s job start failed, code: %d, message: %s\r\n", this.jobName, e.getCode(), e.getMessage());
                    throw new JenkinsClientException(e.getMessage());
                }
            } while (true);
            // Wait till SAST job is complete
            int start = 0;
            Pattern p = Pattern.compile("^Finished: (FAILURE)|(UNSTABLE)|(SUCCESS)$");
            PtaiResultStatus sastJobRes = PtaiResultStatus.UNSTABLE;
            do {
                sastBuild = jenkinsApi.getJobBuild(jobName, buildNumber.toString());
                if (null == sastBuild) break;
                com.ptsecurity.appsec.ai.ee.utils.ci.jenkins.server.ApiResponse<String> sastJobLog;
                sastJobLog = jenkinsApi.getJobProgressiveTextWithHttpInfo(jobName, buildNumber.toString(), String.valueOf(start));
                if (200 != sastJobLog.getStatusCode()) break;
                // Just to simplify processing of optional headers array
                int pos = start;
                try {
                    pos = Integer.parseInt(sastJobLog.getHeaders().get("X-Text-Size").get(0));
                } catch (Exception e) {
                    break;
                }
                if (pos != start) {
                    String[] lines = sastJobLog.getData().split("\\r?\\n");
                    for (String line : lines)
                        log("%s\r\n", line);
                    start = pos;
                }
                Thread.sleep(1000);
                if (StringUtils.isEmpty(sastBuild.getResult())) continue;
                try {
                    sastJobRes = PtaiResultStatus.valueOf(sastBuild.getResult());
                    break;
                } catch (Exception e) {
                    continue;
                }
            } while (true);
            // Save results
            for (String sastResType : Arrays.asList( "json", "html" )) {
                String sastJson = jenkinsApi.getJobBuildArtifact(jobName, buildNumber.toString(), "REPORTS/report." + sastResType);
                Files.write(
                        Paths.get(reportFolderName + File.separator + "sast.report." + sastResType),
                        sastJson.getBytes("utf-8"),
                        StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
            }
            return sastJobRes;
        } catch (IOException e) {
            log(e);
            throw new JenkinsServerException(e.getMessage(), e);
        } catch (ApiException e) {
            log(e);
            throw new JenkinsServerException(e.getMessage(), e);
        } catch (InterruptedException e) {
            log(e);
            throw new JenkinsClientException(e.getMessage(), e);
        }
    }

    static class JenkinsJsonParameter {
        @AllArgsConstructor
        static class NameValuePair {
            @Getter
            private String name;
            @Getter
            private String value;
        }
        @Getter
        private final List<NameValuePair> parameter = new ArrayList<>();

        @SuppressWarnings("UnusedReturnValue")
        public NameValuePair add(String name, String value) {
            NameValuePair res = new NameValuePair(name, value);
            parameter.add(res);
            return res;
        }
    }
}
