openapi: 3.0.1
info:
  title: Current API v1
  description: 'To specify the API version in your request, add v{version} after api/ in the address. For example, api/v1/auth.'
  version: '1'
servers:
  - url: https://ptai420.domain.org:443/
security:
  - Bearer: []
paths:
  /api/configs/yara:
    get:
      tags:
        - Configs
      summary: Get YARA rules
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
    put:
      tags:
        - Configs
      summary: Update YARA rules
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/configs/yaraRulesTemplate:
    get:
      tags:
        - Configs
      summary: Get YARA rules template
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
  /api/configs/securityPoliciesTemplate:
    get:
      tags:
        - Configs
      summary: Get policies rules template
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
  '/api/configs/sastRulesTemplate/{language}':
    get:
      tags:
        - Configs
      summary: Get policies rules template
      parameters:
        - name: language
          in: path
          description: Project id
          required: true
          schema:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/configs/sast/{language}':
    get:
      tags:
        - Configs
      summary: Get SAST rule
      parameters:
        - name: language
          in: path
          description: Programming language group
          required: true
          schema:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Configs
      summary: Update SAST rule
      parameters:
        - name: language
          in: path
          description: Programming language group
          required: true
          schema:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/directoryContent/{projectId}':
    get:
      tags:
        - DirectoryContent
      summary: Get project`s directory content information
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: depth
          in: query
          description: Depth of expanding of elements
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Returns the directory content information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryContent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/directoryContent/{projectId}/{path}':
    get:
      tags:
        - DirectoryContent
      summary: Get project`s directory content information
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: path
          in: path
          description: Subdirectory path. For root set empty
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: Depth of expanding of elements
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Returns the directory content information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryContent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { }
        '401':
          description: Unauthorized
  /api/auth/external/providers:
    get:
      tags:
        - ExternalAuth
      summary: Get available auth providers
      responses:
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/auth/external/signin:
    get:
      tags:
        - ExternalAuth
      summary: Sign in via external auth scheme
      parameters:
        - name: ProviderId
          in: query
          schema:
            type: string
            format: uuid
        - name: ReturnUrl
          in: query
          schema:
            type: string
        - name: ScopeType
          in: query
          schema:
            $ref: '#/components/schemas/AuthScopeType'
      responses:
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/auth/external/signin/ldap:
    post:
      tags:
        - ExternalAuth
      summary: Sign in via external ldap auth scheme
      requestBody:
        description: Auth model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExternalLdapSignInModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalLdapSignInModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExternalLdapSignInModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExternalLdapSignInModel'
      responses:
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/auth/external/sessions:
    get:
      tags:
        - ExternalAuth
      summary: Get session info for external auth
      parameters:
        - name: ProviderId
          in: query
          schema:
            type: string
            format: uuid
        - name: SessionId
          in: query
          schema:
            type: string
            format: uuid
        - name: ScopeType
          in: query
          schema:
            $ref: '#/components/schemas/AuthScopeType'
      responses:
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/auth/external/signout:
    post:
      tags:
        - ExternalAuth
      summary: Sign out via external auth scheme
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                AuthToken:
                  type: string
                ReturnUrl:
                  type: string
            encoding:
              AuthToken: { }
              ReturnUrl: { }
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/auth/external/test/ldap:
    post:
      tags:
        - ExternalAuth
      summary: Test connection for LDAP settings
      requestBody:
        description: LDAP settings
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LdapSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LdapSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LdapSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LdapSettingsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/auth/external/test/ldap/{providerId}':
    post:
      tags:
        - ExternalAuth
      summary: Test connection for existing LDAP settings
      parameters:
        - name: providerId
          in: path
          description: Provider identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: LDAP settings
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LdapSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LdapSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LdapSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LdapSettingsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/auth/external/test/openid:
    post:
      tags:
        - ExternalAuth
      summary: Test connection for OpenId settings
      requestBody:
        description: OpenId settings
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/OpenIdSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/OpenIdSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/OpenIdSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OpenIdSettingsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/auth/external/test/openid/{providerId}':
    post:
      tags:
        - ExternalAuth
      summary: Test connection for existing OpenId settings
      parameters:
        - name: providerId
          in: path
          description: Provider identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: OpenId settings
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/OpenIdSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/OpenIdSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/OpenIdSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OpenIdSettingsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/auth/external/metadata/saml2:
    post:
      tags:
        - ExternalAuth
      summary: Generate Saml2 metadata by settings
      parameters:
        - name: Settings
          in: query
          schema:
            $ref: '#/components/schemas/Saml2SettingsModel'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                SigningCertificateFile:
                  type: string
                  format: binary
            encoding:
              SigningCertificateFile: { }
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/fileContent/{projectId}/{file}':
    get:
      tags:
        - FileContent
      summary: File content
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: file
          in: path
          description: Relative file path in project
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
  '/api/fileContent/{projectId}/scanResults/{scanResultId}/VfsNode':
    get:
      tags:
        - FileContent
      summary: File content by Node path
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
        - name: nodePath
          in: query
          description: Node path
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
  /health/summary:
    get:
      tags:
        - HealthCheck
      summary: Health check of services. Response time in milliseconds
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckSummaryResult'
  /api/tracker/trackers:
    get:
      tags:
        - IssueTracker
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackerModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackerModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackerModel'
        '401':
          description: Unauthorized
  /api/tracker/connections:
    get:
      tags:
        - IssueTracker
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionSettingsModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionSettingsModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionSettingsModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{id}':
    delete:
      tags:
        - IssueTracker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
    get:
      tags:
        - IssueTracker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ConnectionSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ConnectionSettingsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - IssueTracker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skipUpdateCredentials
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/tracker/connections/test:
    post:
      tags:
        - IssueTracker
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConnectionSettingsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/projects':
    get:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectInfoModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectInfoModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectInfoModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/tickets/{key}':
    get:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: key
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TicketModels'
            application/json:
              schema:
                $ref: '#/components/schemas/TicketModels'
            text/json:
              schema:
                $ref: '#/components/schemas/TicketModels'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/tickets':
    post:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TicketModels'
          application/json:
            schema:
              $ref: '#/components/schemas/TicketModels'
          text/json:
            schema:
              $ref: '#/components/schemas/TicketModels'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TicketModels'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BaseTicketLinkModel'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseTicketLinkModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BaseTicketLinkModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/projects/{project}/ticketTypes':
    get:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTypeModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTypeModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/priorities':
    get:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriorityTypeModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriorityTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriorityTypeModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/users':
    get:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: query
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTrackerModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTrackerModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTrackerModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/projects/{project}/fields/{ticketType}':
    get:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: path
          required: true
          schema:
            type: string
        - name: ticketType
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldInfoModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldInfoModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldInfoModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/projects/{project}/fields/{ticketType}/optionValues':
    get:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: path
          required: true
          schema:
            type: string
        - name: ticketType
          in: path
          required: true
          schema:
            type: string
        - name: fieldName
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionValueModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionValueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionValueModel'
        '401':
          description: Unauthorized
  '/api/tracker/connections/{connectionId}/statuses':
    get:
      tags:
        - IssueTracker
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: ticketType
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusType'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusType'
        '401':
          description: Unauthorized
  /api/tracker/oauth1a/requestToken:
    post:
      tags:
        - IssueTrackerOauth1A
      parameters:
        - name: providerKey
          in: query
          schema:
            type: string
        - name: host
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          application/json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          text/json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Oauth1RequestTokenModel'
            application/json:
              schema:
                $ref: '#/components/schemas/Oauth1RequestTokenModel'
            text/json:
              schema:
                $ref: '#/components/schemas/Oauth1RequestTokenModel'
        '401':
          description: Unauthorized
  /api/tracker/oauth1a/accessToken:
    post:
      tags:
        - IssueTrackerOauth1A
      parameters:
        - name: providerKey
          in: query
          schema:
            type: string
        - name: host
          in: query
          schema:
            type: string
        - name: requestToken
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          application/json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          text/json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Oauth1DataModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Oauth1AccessTokenModel'
            application/json:
              schema:
                $ref: '#/components/schemas/Oauth1AccessTokenModel'
            text/json:
              schema:
                $ref: '#/components/schemas/Oauth1AccessTokenModel'
        '401':
          description: Unauthorized
  /api/license:
    get:
      tags:
        - License
      summary: Current license
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - License
      summary: Update license
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file: { }
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/license/fingerprint:
    get:
      tags:
        - License
      summary: Get server fingerprint
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/license/languageGroups:
    get:
      tags:
        - License
      summary: Get list available program language groups.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgrammingLanguageGroupModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgrammingLanguageGroupModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgrammingLanguageGroupModel'
        '401':
          description: Unauthorized
  /api/logs:
    get:
      tags:
        - Logs
      summary: Get server`s logs
      parameters:
        - name: dateFrom
          in: query
          description: Date from
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: Date to
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
  /api/mailing/sendTestEmail:
    post:
      tags:
        - Mailing
      summary: Send test email
      parameters:
        - name: localeId
          in: query
          description: Locale id
          schema:
            type: string
      requestBody:
        description: Test mail model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          application/json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          text/json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  /api/mailing/mailProfiles:
    get:
      tags:
        - Mailing
      summary: Get all mail profiles
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailProfileModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailProfileModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailProfileModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
    post:
      tags:
        - Mailing
      summary: Create mail profile
      requestBody:
        description: Mail profile model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  /api/mailing/mailProfiles/light:
    get:
      tags:
        - Mailing
      summary: Get all light mail profiles
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightMailProfileModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightMailProfileModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightMailProfileModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/mailing/mailProfiles/{mailProfileId}':
    delete:
      tags:
        - Mailing
      summary: Delete mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Nullable'
            application/json:
              schema:
                $ref: '#/components/schemas/Nullable'
            text/json:
              schema:
                $ref: '#/components/schemas/Nullable'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
    get:
      tags:
        - Mailing
      summary: Get mail profile model
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MailProfileModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MailProfileModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MailProfileModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
    patch:
      tags:
        - Mailing
      summary: Update mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Mail profile model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/mailing/mailProfiles/{mailProfileId}/usedInProjects':
    get:
      tags:
        - Mailing
      summary: Get all projects when used mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BriefProjectInfo'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BriefProjectInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BriefProjectInfo'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  /api/auth/membership:
    get:
      tags:
        - Membership
      summary: Gets all project and global members together
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Membership
      summary: Updates user membership (request body contains UserInfo structure that have all user's membership - global and project)
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MemberModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MemberModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberModel'
        '401':
          description: Unauthorized
  '/api/auth/membership/{userId}':
    get:
      tags:
        - Membership
      summary: Gets a user project and global membership
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MemberModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MemberModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberModel'
        '401':
          description: Unauthorized
  '/api/auth/membership/project/{projectId}':
    get:
      tags:
        - Membership
      summary: Gets project members
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberWithUserModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberWithUserModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberWithUserModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Membership
      summary: Adds project members
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectMemberModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectMemberModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectMemberModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectMemberModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
    put:
      tags:
        - Membership
      summary: Updates project member
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectMemberModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectMemberModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/auth/membership/project/{projectId}/{id}':
    delete:
      tags:
        - Membership
      summary: Deletes one project member
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/history/projects/{projectId}':
    get:
      tags:
        - ProjectHistory
      summary: Project history
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: entityId
          in: query
          description: Related entity id
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
        '401':
          description: Unauthorized
  '/api/history/projects/{projectId}/row/{id}':
    get:
      tags:
        - ProjectHistory
      summary: Project history row
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Row id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
        '401':
          description: Unauthorized
  '/api/history/projects/{projectId}/{objectType}':
    get:
      tags:
        - ProjectHistory
      summary: Project history
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: objectType
          in: path
          description: Related entity type
          required: true
          schema:
            $ref: '#/components/schemas/ChangeObjectType'
        - name: entityId
          in: query
          description: Related entity id
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectChangeHistoryRowModel'
        '401':
          description: Unauthorized
  '/api/auth/projectPermissions/{projectId}':
    get:
      tags:
        - ProjectPermissions
      summary: Get project permissions
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPermissionsModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPermissionsModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPermissionsModel'
        '401':
          description: Unauthorized
  /api/auth/projectPermissions:
    put:
      tags:
        - ProjectPermissions
      summary: Apply project permissions changes
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectPermissionsModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectPermissionsModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectPermissionsModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectPermissionsModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects:
    get:
      tags:
        - Projects
      summary: Get projects
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}':
    delete:
      tags:
        - Projects
      summary: Delete project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Projects
      summary: Get project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectModel'
        '401':
          description: Unauthorized
  '/api/projects/name/{name}':
    get:
      tags:
        - Projects
      summary: Get project by name without details
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectModel'
        '401':
          description: Unauthorized
  '/api/projects/{name}/exists':
    get:
      tags:
        - Projects
      summary: Check exists project by name
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults':
    get:
      tags:
        - Projects
      summary: Get all scan results of project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanResultModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanResultModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanResultModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Projects
      summary: Add scan result to repository
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ScanResult creation model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ScanResultCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ScanResultCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ScanResultCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScanResultCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/last':
    get:
      tags:
        - Projects
      summary: Get last scan result of project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
        '401':
          description: Unauthorized
  /api/projects/base:
    post:
      tags:
        - Projects
      summary: Create project with base settings
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects/extended:
    post:
      tags:
        - Projects
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/blackBoxSettings':
    get:
      tags:
        - Projects
      summary: BlackBox settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BlackBoxSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/BlackBoxSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BlackBoxSettingsModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: BlackBox settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Extended box settings model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BlackBoxSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/BlackBoxSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BlackBoxSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BlackBoxSettingsModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ActionResult'
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  /api/projects/withScans:
    get:
      tags:
        - Projects
      summary: Get projects with high vulnerabilities statistic
      responses:
        '200':
          description: Returns projects with high vulnerabilities statistic
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectWithExtendedInfoModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectWithExtendedInfoModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectWithExtendedInfoModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/withScans/{projectId}':
    get:
      tags:
        - Projects
      summary: Get project with high vulnerabilities statistic
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns project with high vulnerabilities statistic
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectWithExtendedInfoModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithExtendedInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectWithExtendedInfoModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/{scanResultId}/issues':
    get:
      tags:
        - Projects
      summary: Get issues
      parameters:
        - name: projectId
          in: path
          description: Project`s id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result` id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VulnerabilityModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VulnerabilityModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VulnerabilityModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/{scanResultId}/issues/headers':
    get:
      tags:
        - Projects
      summary: Get issues headers
      parameters:
        - name: projectId
          in: path
          description: Project`s id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
        - name: localeId
          in: query
          description: locale to localize headers
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  type: string
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
            text/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/{issueId}':
    get:
      tags:
        - Projects
      summary: Get issue
      parameters:
        - name: projectId
          in: path
          description: Project`s id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Issue id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VulnerabilityFullModel'
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityFullModel'
            text/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityFullModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/filePatterns':
    get:
      tags:
        - Projects
      summary: Project`s file patterns
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Project`s file patterns
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: File patterns
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: string
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/*+json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/defaultSettings':
    get:
      tags:
        - Projects
      summary: Get default settings for existing project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/exclusions':
    get:
      tags:
        - Projects
      summary: Get exlusions files/dir from scan
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FileFolderExclusionsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/FileFolderExclusionsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/FileFolderExclusionsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update exlusions files/dir from scan
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Exclusions Model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/defaultSettings:
    get:
      tags:
        - Projects
      summary: Get default settings
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/settings':
    get:
      tags:
        - Projects
      summary: Get project settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update project settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Project settings model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/extendedSettings':
    put:
      tags:
        - Projects
      summary: Update project settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Extended project settings model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtendedProjectSettingsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/settingsChangingDate':
    get:
      tags:
        - Projects
      summary: Get date of last changing scan settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: date-time
            application/json:
              schema:
                type: string
                format: date-time
            text/json:
              schema:
                type: string
                format: date-time
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/completeConfiguration':
    post:
      tags:
        - Projects
      summary: Complete project configuration
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '404':
          description: Not Found
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanSettings/{scanSettingsId}':
    get:
      tags:
        - Projects
      summary: Get scan settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanSettingsId
          in: path
          description: Scan settings id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ScanSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ScanSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ScanSettingsModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanSettings/{scanSettingsId}/aiproj':
    get:
      tags:
        - Projects
      summary: Download aiproj file
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanSettingsId
          in: path
          description: Scan settings id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/securityPolicies':
    get:
      tags:
        - Projects
      summary: Get policies rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SecurityPoliciesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityPoliciesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SecurityPoliciesModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update policies rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Security policies model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/sastRules':
    get:
      tags:
        - Projects
      summary: Get SAST rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SastRulesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/SastRulesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SastRulesModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update SAST rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: SAST rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/yaraRules':
    get:
      tags:
        - Projects
      summary: Get YARA rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/YaraRulesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/YaraRulesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/YaraRulesModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update YARA rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: SAST rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/YaraRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/YaraRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/YaraRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/YaraRulesBaseModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/analysisRules':
    get:
      tags:
        - Projects
      summary: Get analysis rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AnalysisRulesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisRulesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/AnalysisRulesModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update analysis rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Analysis rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/{scanResultId}':
    get:
      tags:
        - Projects
      summary: Get scan result of project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: ScanResult id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ScanResultModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/{issueId}/state':
    put:
      tags:
        - Projects
      summary: Change single issue approval state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Vulnerability id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing approval status
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/{issueId}/favorite':
    put:
      tags:
        - Projects
      summary: Change single issue favorite state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Vulnerability id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing favorite status
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/state':
    put:
      tags:
        - Projects
      summary: Change many issues approval state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing approval statuses
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/favorite':
    put:
      tags:
        - Projects
      summary: Change many issues favorite state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing favorite statuses
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesFavoriteModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesFavoriteModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesFavoriteModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesFavoriteModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/scanResults/{scanResultId}/errors':
    get:
      tags:
        - Projects
      summary: Get scan errors
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanErrorModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanErrorModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/tracker/extendedSettings':
    get:
      tags:
        - Projects
      summary: Get issue tracker integration settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update issue tracker integration settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Project id
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IssueTrackerIntegrationSettingsModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/tracker/links/{issueId}/jira':
    post:
      tags:
        - Projects
      summary: Link vulnerability with jira ticket
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Issue id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Ticket link
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/JiraTicketLinkModel'
          application/json:
            schema:
              $ref: '#/components/schemas/JiraTicketLinkModel'
          text/json:
            schema:
              $ref: '#/components/schemas/JiraTicketLinkModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/JiraTicketLinkModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/tracker/links/{issueId}/jira/unlink':
    post:
      tags:
        - Projects
      summary: Unlink vulnerability with issue tracker ticket
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Issue id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: { }
            application/json:
              schema: { }
            text/json:
              schema: { }
        '401':
          description: Unauthorized
  /api/projects/activeScans:
    get:
      tags:
        - Projects
      summary: Active scans
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveScanModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveScanModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveScanModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/issues/{issueId}/resources':
    get:
      tags:
        - Projects
      summary: Get issue`s descriptions and metadatas
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: localeId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IssueResourcesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResourcesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/IssueResourcesModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/pin':
    post:
      tags:
        - Projects
      summary: Pin project for current user
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/projects/{projectId}/unpin':
    post:
      tags:
        - Projects
      summary: Unpin project for current user
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/templates:
    get:
      tags:
        - Reports
      summary: Get all reports templates
      parameters:
        - name: localeId
          in: query
          schema:
            type: string
        - name: withContent
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplateModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplateModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Reports
      summary: Create report template
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/reports/templates/{id}':
    delete:
      tags:
        - Reports
      summary: Delete report template by id
      parameters:
        - name: id
          in: path
          description: Report id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Reports
      summary: Get report template by id
      parameters:
        - name: id
          in: path
          description: Report id
          required: true
          schema:
            type: string
            format: uuid
        - name: localeId
          in: query
          description: Locale id
          schema:
            type: string
        - name: needAddCss
          in: query
          description: Add CSS styles?
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Reports
      summary: Update report template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/reports/templates/{type}':
    get:
      tags:
        - Reports
      summary: Get report template by type
      parameters:
        - name: type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ReportType'
        - name: localeId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '401':
          description: Unauthorized
  '/api/reports/userTemplates/{name}':
    get:
      tags:
        - Reports
      summary: Get user report template by name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: localeId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '401':
          description: Unauthorized
  /api/reports/templates/check:
    post:
      tags:
        - Reports
      summary: Check template on errors. Pass template text in body
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TemplateValidationResult'
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateValidationResult'
            text/json:
              schema:
                $ref: '#/components/schemas/TemplateValidationResult'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/generate:
    post:
      tags:
        - Reports
      summary: "Generate report\r\nPass sessionId in model for progress notifications.\r\nsessionId will be removed when the report generation process becomes asynchronous"
      requestBody:
        description: Report generate model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/preview:
    post:
      tags:
        - Reports
      summary: Preview report
      parameters:
        - name: localeId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
      responses:
        '400':
          description: Bad Request
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
  /api/reports/parameters:
    get:
      tags:
        - Reports
      summary: Get report parameters for current user
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserReportParametersModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserReportParametersModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserReportParametersModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Reports
      summary: Save report parameters for current user
      requestBody:
        description: Report parameters model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/scanAgents:
    get:
      tags:
        - ScanAgent
      summary: Get all scan agents
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanAgentModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanAgentModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanAgentModel'
        '401':
          description: Unauthorized
  '/api/scanAgents/{scanAgentId}/pause':
    post:
      tags:
        - ScanAgent
      summary: Suspend agent
      parameters:
        - name: scanAgentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: stopScan
          in: query
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/scanAgents/{scanAgentId}':
    delete:
      tags:
        - ScanAgent
      summary: Delete inactive or suspended agent
      parameters:
        - name: scanAgentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/scanAgents/hasActive:
    get:
      tags:
        - ScanAgent
      summary: Check has active agents
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
  '/api/scanAgents/{scanAgentId}/active':
    post:
      tags:
        - ScanAgent
      summary: 'Activate agent, i.e. set it''s status to Active'
      parameters:
        - name: scanAgentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/scanAgents/count:
    get:
      tags:
        - ScanAgent
      summary: Count all scan agents in any status
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        '401':
          description: Unauthorized
  /api/scans:
    get:
      tags:
        - ScanQueue
      summary: Get active items in scan queue
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanQueueModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanQueueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanQueueModel'
        '401':
          description: Unauthorized
  '/api/scans/{projectId}/start':
    post:
      tags:
        - ScanQueue
      summary: Start scan. Return scan result id
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/StartScanModel'
          application/json:
            schema:
              $ref: '#/components/schemas/StartScanModel'
          text/json:
            schema:
              $ref: '#/components/schemas/StartScanModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/StartScanModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/scans/{scanResultId}/stop':
    post:
      tags:
        - ScanQueue
      summary: Stop scan
      parameters:
        - name: scanResultId
          in: path
          description: Scan result id.Guid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/scans/stop:
    post:
      tags:
        - ScanQueue
      summary: Stop all scans
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/serverSettings/proxy:
    get:
      tags:
        - ServerSettings
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProxySettings'
            application/json:
              schema:
                $ref: '#/components/schemas/ProxySettings'
            text/json:
              schema:
                $ref: '#/components/schemas/ProxySettings'
        '401':
          description: Unauthorized
  /api/serverSettings/certificate:
    get:
      tags:
        - ServerSettings
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CertificateInfoModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CertificateInfoModel'
        '401':
          description: Unauthorized
  /api/settings/logs:
    get:
      tags:
        - Settings
      summary: Settings for logging to an external system
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LogSettings'
            application/json:
              schema:
                $ref: '#/components/schemas/LogSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/LogSettings'
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: Settings for logging to an external system
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LogSettings'
          application/json:
            schema:
              $ref: '#/components/schemas/LogSettings'
          text/json:
            schema:
              $ref: '#/components/schemas/LogSettings'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LogSettings'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/settings/storage:
    get:
      tags:
        - Settings
      summary: File storage settings
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FileStorageSettings'
            application/json:
              schema:
                $ref: '#/components/schemas/FileStorageSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/FileStorageSettings'
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: File storage settings
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FileStorageSettings'
          application/json:
            schema:
              $ref: '#/components/schemas/FileStorageSettings'
          text/json:
            schema:
              $ref: '#/components/schemas/FileStorageSettings'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FileStorageSettings'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/settings/sso:
    get:
      tags:
        - Settings
      summary: Common SSO settings
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SSOSettings'
            application/json:
              schema:
                $ref: '#/components/schemas/SSOSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/SSOSettings'
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: Common SSO settings
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SSOSettings'
          application/json:
            schema:
              $ref: '#/components/schemas/SSOSettings'
          text/json:
            schema:
              $ref: '#/components/schemas/SSOSettings'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SSOSettings'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/settings/auth/providers:
    get:
      tags:
        - Settings
      summary: Get external auth providers
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthProviderSettingsModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthProviderSettingsModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthProviderSettingsModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Settings
      summary: Create external auth provider
      parameters:
        - name: Provider
          in: query
          schema:
            $ref: '#/components/schemas/AuthProviderSettingsBaseModel'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                SigningCertificateFile:
                  type: string
                  format: binary
                SignatureValidationCertificateFile:
                  type: string
                  format: binary
            encoding:
              SigningCertificateFile: { }
              SignatureValidationCertificateFile: { }
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/settings/auth/providers/{providerId}':
    delete:
      tags:
        - Settings
      summary: Delete external auth provider
      parameters:
        - name: providerId
          in: path
          description: Provider`s id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    get:
      tags:
        - Settings
      summary: Get external auth provider by Id
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthProviderSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthProviderSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthProviderSettingsModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Settings
      summary: Update external auth provider
      parameters:
        - name: providerId
          in: path
          description: Provider identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: Provider
          in: query
          schema:
            $ref: '#/components/schemas/AuthProviderSettingsBaseModel'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                SigningCertificateFile:
                  type: string
                  format: binary
                SignatureValidationCertificateFile:
                  type: string
                  format: binary
            encoding:
              SigningCertificateFile: { }
              SignatureValidationCertificateFile: { }
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/settings/auth/saml2/sign-algs:
    get:
      tags:
        - Settings
      summary: Get Saml2 sign algorithms keys
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/settings/auth/saml2/nameid-policies:
    get:
      tags:
        - Settings
      summary: Get Sam2 name id policies keys
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/settings/scanAgent:
    get:
      tags:
        - Settings
      summary: Scan agent connection settings information
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ScanAgentConnectionSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ScanAgentConnectionSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ScanAgentConnectionSettingsModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/supportedCredentials/{vcsType}':
    get:
      tags:
        - SourceControl
      summary: Get supported credentials types
      parameters:
        - name: vcsType
          in: path
          description: Repostory type
          required: true
          schema:
            $ref: '#/components/schemas/RepositoryType'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceControlCredentalsType'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceControlCredentalsType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceControlCredentalsType'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/sourceControl/project:
    post:
      tags:
        - SourceControl
      summary: Create temp project.
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/project/{projectId}':
    patch:
      tags:
        - SourceControl
      summary: Update projects source control connection settings.
      parameters:
        - name: projectId
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SourceControlConnectionSettingsModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/{projectId}/branches':
    get:
      tags:
        - SourceControl
      summary: Read branches from project`s repository.
      parameters:
        - name: project
          in: query
          description: Selected project. TFS only.
          schema:
            type: string
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/{projectId}/checkout':
    post:
      tags:
        - SourceControl
      summary: Checkout project`s repository. Pass settings in body. Progress send in the background in notifications
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: isNew
          in: query
          description: Flag of not stored settings
          schema:
            type: boolean
      requestBody:
        description: If null is passed null previous settings will be used
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/{projectId}/update':
    post:
      tags:
        - SourceControl
      summary: Update project`s repository. Pass settings in body. Progress send in the background in notifications
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SourceControlSettingsModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/sourceControl/{projectId}/projects':
    get:
      tags:
        - SourceControl
      summary: Get projects (TFS only)
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/store/project:
    post:
      tags:
        - Store
      summary: Create project with sources and default settings. Uploading sources in the background after returning project Id. Pass files in Form
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/{projectId}/sources':
    get:
      tags:
        - Store
      summary: Download project sources
      parameters:
        - name: projectId
          in: path
          description: project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Store
      summary: Upload sources using files collection
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: archived
          in: query
          description: Sources in archive
          schema:
            type: boolean
        - name: noNeedToActualize
          in: query
          description: Disable actualize settings by sources
          schema:
            type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: string
                  format: binary
            encoding:
              files:
                style: form
      responses:
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/{projectId}/logs/{scanResultId}':
    get:
      tags:
        - Store
      summary: Download scan logs
      parameters:
        - name: projectId
          in: path
          description: project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/store/{projectId}/reports/{scanResultId}':
    get:
      tags:
        - Store
      summary: Download scan reports
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: scanResultId
          in: path
          description: Scan result id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/auth/users/current:
    get:
      tags:
        - User
      summary: User from current jwt token
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '401':
          description: Unauthorized
  /api/auth/users/search:
    get:
      tags:
        - User
      summary: Find users
      parameters:
        - name: searchValue
          in: query
          schema:
            type: string
        - name: exceptDefined
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchResultModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchResultModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchResultModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/roles':
    get:
      tags:
        - User
      summary: User`s global roles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/roles/{projectId}':
    get:
      tags:
        - User
      summary: User`s project roles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/permissions':
    get:
      tags:
        - User
      summary: User`s global permissions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionType'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionType'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/permissions/{projectId}':
    get:
      tags:
        - User
      summary: User`s permissions on project
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionType'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionType'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/permissions/projects':
    get:
      tags:
        - User
      summary: User`s permissions by UserId
      parameters:
        - name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPermissions'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPermissions'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPermissions'
        '401':
          description: Unauthorized
  /api/auth/users/current/password:
    put:
      tags:
        - User
      summary: Update user password
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: string
          application/json:
            schema:
              type: string
          text/json:
            schema:
              type: string
          application/*+json:
            schema:
              type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/delete':
    delete:
      tags:
        - User
      summary: Block member. It just made user inactive but not deletes it from DB
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  '/api/auth/users/{userId}/restore':
    put:
      tags:
        - User
      summary: Unblock member. Makes an user active again
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/versions/package/current:
    get:
      tags:
        - Version
      summary: Get current package version number
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
components:
  schemas:
    ActionResult:
      type: object
      additionalProperties: false
    ActiveScanModel:
      type: object
      properties:
        scanResultId:
          type: string
          format: uuid
        progress:
          $ref: '#/components/schemas/ScanProgressModel'
        project:
          $ref: '#/components/schemas/ProjectModel'
      additionalProperties: false
    AnalysisRulesBaseModel:
      type: object
      properties:
        sastRules:
          $ref: '#/components/schemas/SastRulesBaseModel'
        yaraRules:
          $ref: '#/components/schemas/YaraRulesBaseModel'
      additionalProperties: false
    AnalysisRulesModel:
      type: object
      properties:
        sastRules:
          $ref: '#/components/schemas/SastRulesModel'
        yaraRules:
          $ref: '#/components/schemas/YaraRulesModel'
      additionalProperties: false
    ApiErrorModel:
      type: object
      properties:
        errorCode:
          $ref: '#/components/schemas/ApiErrorType'
        details:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    ApiErrorType:
      enum:
        - None
        - INCORRECT_USER_AND_PASSWORD
        - USER_ID_IS_EMPTY
        - MEMBER_ALREADY_EXISTS
        - PROJECT_ROLE_PERMISSIONS_ALREADY_EXISTS
        - ACCESS_TOKEN_IS_INCORRECT
        - ACCESS_TOKEN_WITH_SAME_NAME_ALREADY_EXISTS
        - PASSWORD_IS_INCORRECT
        - USER_IS_INCORRECT
        - INITIATOR_NOT_FOUND
        - CREDENTIAL_STORE_IS_UNVAILABLE_OR_TAINTED
        - USER_BLOCKED
        - CANNOT_ASSIGN_PROJECT_ROLE_TO_ADMINISTRATOR
        - EXT_AUTH_PROVIDERS_GET_ERROR
        - EXT_AUTH_PROVIDERS_BY_SAME_SCHEME_LIMIT_ERROR
        - EXT_AUTH_PROVIDERS_AT_LEAST_ONE_ENABLED_LIMIT_ERROR
        - EXT_AUTH_PROVIDER_GET_NOT_FOUND
        - EXT_AUTH_PROVIDER_GET_ERROR
        - EXT_AUTH_PROVIDER_UPDATE_ERROR
        - EXT_AUTH_PROVIDER_DELETE_ERROR
        - EXT_AUTH_PROVIDER_IS_INCORRECT
        - EXT_AUTH_PROVIDER_NAME_IS_EMPTY
        - EXT_AUTH_PROVIDER_NAME_LENGTH_LIMIT
        - EXT_AUTH_PROVIDER_WITH_SAME_NAME_ALREADY_EXISTS
        - EXT_AUTH_SETTINGS_IS_INCORRECT
        - EXT_AUTH_SETTINGS_OPENID_AUTHORITY_IS_INCORRECT
        - EXT_AUTH_SETTINGS_OPENID_CLIENT_ID_IS_INCORRECT
        - EXT_AUTH_SETTINGS_OPENID_CLIENT_SECRET_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_ISSUER_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_ALLOWED_ISSUER_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_ACS_URL_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_LOGOUT_URL_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_SIGN_VALIDATION_CERT_IS_EMPTY
        - EXT_AUTH_SETTINGS_SAML2_SIGN_VALIDATION_CERT_SIZE_LIMIT
        - EXT_AUTH_SETTINGS_SAML2_SIGNING_CERT_IS_EMPTY
        - EXT_AUTH_SETTINGS_SAML2_SIGNING_CERT_SIZE_LIMIT
        - EXT_AUTH_SETTINGS_SAML2_NAMEID_POLICY_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_SIGN_ALG_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_SIGN_ALG_IS_EMPTY
        - EXT_AUTH_SETTINGS_LDAP_HOST_IS_INCORRECT
        - EXT_AUTH_SETTINGS_LDAP_HOST_HAS_SCHEMA
        - EXT_AUTH_SETTINGS_LDAP_PORT_IS_INCORRECT
        - EXT_AUTH_SETTINGS_LDAP_SSL_PORT_IS_INCORRECT
        - EXT_AUTH_SETTINGS_LDAP_BASE_DN_IS_INCORRECT
        - EXT_AUTH_SETTINGS_TEST_CONNECTION_FAILED
        - EXT_AUTH_ROLE_MAPPINGS_EMPTY_FIELDS
        - EXT_AUTH_ROLE_MAPPINGS_NO_GLOBAL_ROLES
        - EXT_AUTH_SIGNIN_ERROR
        - EXT_AUTH_SIGNIN_CALLBACK_ERROR
        - EXT_AUTH_SIGNIN_PROVIDER_IS_EMPTY
        - EXT_AUTH_SIGNIN_PROVIDER_IS_EMPTY_OR_DISABLED
        - EXT_AUTH_SIGNIN_SCOPE_TYPE_IS_INCORRECT
        - EXT_AUTH_SIGNIN_PROVIDER_IS_NOT_AUTHENTICATED
        - EXT_AUTH_SIGNIN_INVALID_CREDENTIALS
        - EXT_AUTH_SIGNIN_INVALID_SESSION_ID
        - EXT_AUTH_SIGNIN_SCHEME_IS_INCORRECT
        - EXT_AUTH_SIGNIN_OPENID_INVALID_CONFIGURATION
        - EXT_AUTH_SIGNIN_OPENID_TOKEN_EXPIRED
        - EXT_AUTH_SIGNIN_OPENID_INCONSISTENT_RESPONSE_MODE_AND_TYPE
        - EXT_AUTH_SIGNIN_SAML2_SETTINGS_IS_EMPTY
        - EXT_AUTH_SIGNIN_SAML2_RESPONSE_STATUS_ERROR
        - EXT_AUTH_SIGNIN_SAML2_INVALID_SIGNATURE
        - EXT_AUTH_SIGNIN_LDAP_SSL_REQUIRED
        - EXT_AUTH_SIGNIN_LDAP_SETTINGS_IS_EMPTY
        - EXT_AUTH_SIGN_OUT_ERROR
        - EXT_AUTH_SIGN_OUT_PROVIDER_IS_EMPTY
        - EXT_AUTH_SIGN_OUT_TOKEN_NOT_FOUND
        - EXT_AUTH_SIGN_OUT_SCHEME_IS_INCORRECT
        - EXT_AUTH_SIGN_OUT_OPENID_ERROR
        - EXT_AUTH_SIGN_OUT_SAML2_ERROR
        - EXT_AUTH_SIGN_OUT_SAML2_EMPTY_LOGOUT_URL_ERROR
        - EXT_AUTH_SESSION_GET_ERROR
        - EXT_AUTH_SESSION_CLAIMS_NOT_DEFINED
        - EXT_AUTH_SESSION_NOT_FOUND
        - EXT_AUTH_SESSION_EXPIRED
        - EXT_AUTH_SESSION_PROVIDER_NOT_FOUND
        - EXT_AUTH_SESSION_USER_NOT_EQUAL
        - EXT_AUTH_METADATA_SAML2_ERROR
        - EXT_AUTH_USER_PROVISION_ERROR
        - EXT_AUTH_USER_PROVISION_USER_IS_NOT_DEFINED
        - EXT_AUTH_USER_PROVISION_USER_LOGIN_FIELD_IS_NOT_MAPPED
        - EXT_AUTH_USER_PROVISION_NAME_FIELD_IS_NOT_MAPPED
        - UPDATE_PACKAGE_VERSION_IS_ALREADY_UPLOADED
        - UPDATE_PACKAGE_UPLOADED_IS_ALREADY_STARTED
        - UPDATE_PACKAGE_UNKNOWN_PRODUCT
        - UPDATE_PACKAGE_VERSION_IS_NOT_UPLOADED
        - UPDATE_SERVER_PROCESS_RUN_TIMEOUT
        - UPDATE_SERVER_PARAMETERS_INVALID
        - UPDATE_SERVER_INSTALLER_EXIT_WITH_ERROR
        - UPDATE_SERVER_PACKAGE_IS_INCORRECT
        - UPDATE_SERVER_NOT_ENOUGH_SPACE
        - VERSION_MISMATCH
        - CERTIFICATE_FILE_IS_EMPTY
        - CERTIFICATE_IS_ALREADY_INSTALLED
        - CERTIFICATE_IS_NOT_VALID
        - URI_IS_NOT_VALID
        - PORT_IS_NOT_SPECIFIED
        - INCORRECT_DATE_VALUE
        - PROJECT_WITH_SAME_NAME_ALREADY_EXISTS
        - UNEXPECTED_SCAN_STAGE
        - PROJECT_NOT_FOUND
        - SCANRESULT_NOT_FOUND
        - INVALID_JSON_FIELDS
        - INVALID_BLACKBOX_SETTINGS
        - INCORRECT_SAST_RULES
        - UNEXPECTED_LANGUAGE
        - MAIL_PROFILE_NOT_FOUND
        - UPDATER_NOT_SET
        - ISSUE_NOT_FOUND
        - SCANSETTINGS_NOT_FOUND
        - INVALID_QUERY_PARAMETER
        - ISSUE_TRACKER_CONNECTION_NOT_FOUND
        - ISSUE_TRACKER_CONNECTION_SETTINGS_NOT_SET
        - ISSUE_TRACKER_SETTINGS_ID_NOT_SET
        - ISSUE_TRACKER_CREDENTIALS_NOT_SET
        - ISSUE_TRACKER_HOST_IS_INCORRECT
        - ISSUE_TRACKER_OAUTH_DATA_NOT_SET
        - ISSUE_TRACKER_TRACKER_NOT_FOUND
        - ISSUE_TRACKER_TRACKER_NOT_FOUND_WITH_OAUTH
        - ISSUE_TRACKER_INVALID_TICKET_LINK
        - ISSUE_TRACKER_UNSUPPORTED_FIELDS_COFIGURATION
        - ISSUE_TRACKER_TICKET_CREATION_FAILED
        - ISSUE_TRACKER_PRIORITIES_GETTING_FAILED
        - ISSUE_TRACKER_USERS_GETTING_FAILED
        - ISSUE_TRACKER_STATUSES_GETTING_FAILED
        - ISSUE_TRACKER_FIELDS_GETTING_FAILED
        - ISSUE_TRACKER_OPTIONS_GETTING_FAILED
        - ISSUE_TRACKER_EXISTING_TICKETS_GETTING_FAILED
        - ISSUE_TRACKER_COMPONENTS_GETTING_FAILED
        - ISSUE_TRACKER_CAPTCHA_CHALLENGE
        - ISSUE_TRACKER_AUTHENTICATION_DENIED_DETAILED
        - ISSUE_TRACKER_AUTHENTICATION_DENIED
        - ISSUE_TRACKER_AUTHENTICATION_FAILED
        - ISSUE_TRACKER_OAUTH_SETTINGS_INVALID
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_GETTING_ACCESS_TOKEN_FAILED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_INVALID_ACCESS_TOKEN_RETURNED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_GETTING_REQUEST_TOKEN_FAILED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_INVALID_REQUEST_TOKEN_RETURNED
        - FS_SOURCE_IS_BUSY
        - DIRECTORY_NOT_FOUND
        - ISSUE_ATTACH_TICKET_LINK_FAILED
        - COMMENT_POLICY_FAILED_COMMENT_IS_EMPTY
        - PROJECTS_COUNT_LIMITED_BY_LICENSE
        - LICENSE_FILE_IS_INVALID
        - LICENSE_EXPIRED
        - LICENSE_FINGERPRINT_ERROR
        - LICENSE_WITHOUT_FINGERPRINT
        - LANGUAGE_NOT_ALLOWED_BY_LICENCE
        - LICENSED_AGENTS_LIMIT_EXCEED
        - COULD_NOT_STORE_LICENSE
        - LICENSE_SERVICE_NOT_AVAILABLE
        - LICENSE_UNLICENSED_USAGE
        - UNKNOWN_SOURCE_VERSION_CONTROL_SYSTEM
        - SOURCE_VERSION_CONTROL_SYSTEM_ERROR
        - INVALID_VERSION_CONTROL_SYSTEM_SETTINGS
        - SCAN_AGENT_NOT_FOUND
        - SCAN_ALREADY_SCHEDULED
        - INCORRECT_AGENT_STATUS
        - SCAN_AGENT_WAS_SUSPENDED
        - SCAN_AGENT_IS_SCANNING
        - SCAN_NOT_FOUND
        - ACTIVE_SCAN_AGENTS_NOT_FOUND
        - SCAN_AGENT_IS_ACTIVE
        - SCHEDULING_IS_LOCKED
        - SCAN_AGENT_NUMBER_EXCEED
        - NO_SCAN_MODULES
        - SERVER_CERTIFICATE_NOT_FOUND
        - FILESYSTEM_ERROR_ACCESS_DENIED
        - VAULT_CREDENTIALS_NOT_FOUND
        - REPORT_TEMPLATE_NOT_FOUND
        - REPORT_GENERATE_FAILED
        - REPORT_TEMPLATE_INVALID
        - REPORT_TEMPLATE_UNKNOWN_FORMAT
        - REPORT_INCORRECT_PARAMETERS
        - REPORT_TEMPLATE_WITH_SAME_NAME_ALREADY_EXISTS
        - REPORT_TEMPLATE_FILE_NAME_INCORRECT_MACROS
        - INVALID_VERSION_CONTROL_SYSTEM_CONNECTION_SETTINGS
        - COULD_NOT_STORE_PROJECT
        - COULD_NOT_STORE_SCAN_SETTINGS
        - FILES_FOR_DOWNLOAD_NOT_FOUND
        - PROJECTS_FILES_NOT_FOUND
        - INVALID_UPLOAD_PATH
        - INVALID_PATH_PARAMETER
        - COULD_NOT_CHECKOUT_PROJECT
        - COULD_NOT_UPDATE_PROJECT_SOURCES_FROM_SOURCE_CONTROL
        - USER_ID_IS_INCORRECT
      type: string
    AuthProviderModel:
      type: object
      properties:
        Id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        scheme:
          $ref: '#/components/schemas/AuthProviderScheme'
        enabled:
          type: boolean
      additionalProperties: false
    AuthProviderScheme:
      enum:
        - OpenIdConnect
        - Saml2
        - Ldap
      type: string
    AuthProviderSettingsBaseModel:
      type: object
      properties:
        ldap:
          $ref: '#/components/schemas/LdapSettingsModel'
        openId:
          $ref: '#/components/schemas/OpenIdSettingsModel'
        saml2:
          $ref: '#/components/schemas/Saml2SettingsModel'
        userMappings:
          type: array
          items:
            $ref: '#/components/schemas/UserMappingModel'
          nullable: true
        roleMappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleMappingModel'
          nullable: true
        name:
          type: string
          nullable: true
        scheme:
          $ref: '#/components/schemas/AuthProviderScheme'
        enabled:
          type: boolean
      additionalProperties: false
    AuthProviderSettingsModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ldap:
          $ref: '#/components/schemas/LdapSettingsModel'
        openId:
          $ref: '#/components/schemas/OpenIdSettingsModel'
        saml2:
          $ref: '#/components/schemas/Saml2SettingsModel'
        userMappings:
          type: array
          items:
            $ref: '#/components/schemas/UserMappingModel'
          nullable: true
        roleMappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleMappingModel'
          nullable: true
        name:
          type: string
          nullable: true
        scheme:
          $ref: '#/components/schemas/AuthProviderScheme'
        enabled:
          type: boolean
      additionalProperties: false
    AuthScopeType:
      enum:
        - None
        - Agent
        - Internal
        - Web
        - WebRefresh
        - WebLongRefresh
        - AccessToken
        - AccessTokenRefresh
      type: string
    AuthType:
      enum:
        - Form
        - Http
        - None
        - RawCookie
        - Unknown
        - Basic
        - OAuth1A
      type: string
    BaseProjectSettingsModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        programmingLanguageGroup:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
        projectUrl:
          type: string
          nullable: true
        whiteBox:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        blackBoxEnabled:
          type: boolean
        blackBox:
          $ref: '#/components/schemas/BlackBoxSettingsBaseModel'
      additionalProperties: false
    BaseTicketLinkModel:
      type: object
      properties:
        trackerType:
          $ref: '#/components/schemas/TrackerType'
        connectionId:
          type: string
          format: uuid
        ticketId:
          type: string
          nullable: true
      additionalProperties: false
    BasicCredentialsModel:
      type: object
      properties:
        userName:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxAddressModel:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/BlackBoxFormat'
        address:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxAuthenticationFullModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AuthType'
        form:
          $ref: '#/components/schemas/BlackBoxFormAuthenticationModel'
        http:
          $ref: '#/components/schemas/BlackBoxHttpAuthenticationModel'
        cookie:
          $ref: '#/components/schemas/BlackBoxRawCookieAuthenticationModel'
      additionalProperties: false
    BlackBoxFormat:
      enum:
        - Wildcard
        - ExactMatch
        - RegExp
      type: string
    BlackBoxFormAuthenticationModel:
      type: object
      properties:
        formDetection:
          $ref: '#/components/schemas/BlackBoxFormDetection'
        loginKey:
          type: string
          nullable: true
        passwordKey:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        formAddress:
          type: string
          nullable: true
        formXPath:
          type: string
          nullable: true
        validationTemplate:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxFormDetection:
      enum:
        - Auto
        - Manual
      type: string
    BlackBoxHttpAuthenticationModel:
      type: object
      properties:
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        validationAddress:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxProxySettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        type:
          $ref: '#/components/schemas/ProxyType'
        host:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxRawCookieAuthenticationModel:
      type: object
      properties:
        validationAddress:
          type: string
          nullable: true
        validationTemplate:
          type: string
          nullable: true
        cookie:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxScanLevel:
      enum:
        - None
        - Fast
        - Normal
        - Full
      type: string
    BlackBoxSettingsBaseModel:
      type: object
      properties:
        site:
          type: string
          nullable: true
        sslCheck:
          type: boolean
        level:
          $ref: '#/components/schemas/BlackBoxScanLevel'
        scanScope:
          $ref: '#/components/schemas/ScanScope'
        blackListedAddresses:
          type: array
          items:
            $ref: '#/components/schemas/BlackBoxAddressModel'
          nullable: true
        whiteListedAddresses:
          type: array
          items:
            $ref: '#/components/schemas/BlackBoxAddressModel'
          nullable: true
        additionalHttpHeaders:
          type: object
          additionalProperties:
            type: string
          nullable: true
        authentication:
          $ref: '#/components/schemas/BlackBoxAuthenticationFullModel'
        proxySettings:
          $ref: '#/components/schemas/BlackBoxProxySettingsModel'
        runAutocheckAfterScan:
          type: boolean
      additionalProperties: false
    BlackBoxSettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        site:
          type: string
          nullable: true
        sslCheck:
          type: boolean
        level:
          $ref: '#/components/schemas/BlackBoxScanLevel'
        scanScope:
          $ref: '#/components/schemas/ScanScope'
        blackListedAddresses:
          type: array
          items:
            $ref: '#/components/schemas/BlackBoxAddressModel'
          nullable: true
        whiteListedAddresses:
          type: array
          items:
            $ref: '#/components/schemas/BlackBoxAddressModel'
          nullable: true
        additionalHttpHeaders:
          type: object
          additionalProperties:
            type: string
          nullable: true
        authentication:
          $ref: '#/components/schemas/BlackBoxAuthenticationFullModel'
        proxySettings:
          $ref: '#/components/schemas/BlackBoxProxySettingsModel'
        runAutocheckAfterScan:
          type: boolean
      additionalProperties: false
    BlackboxVulnerabilytyModel:
      type: object
      properties:
        title:
          type: string
          nullable: true
        scannedUrl:
          type: string
          nullable: true
        items:
          type: object
          additionalProperties:
            type: string
          nullable: true
        request:
          $ref: '#/components/schemas/IssueExploitDataModel'
        response:
          $ref: '#/components/schemas/IssueExploitDataModel'
      additionalProperties: false
    BriefProjectInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectName:
          type: string
          nullable: true
      additionalProperties: false
    CertificateInfoModel:
      type: object
      properties:
        thumbprint:
          type: string
          nullable: true
        friendlyName:
          type: string
          nullable: true
        subjectName:
          type: string
          nullable: true
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        daysBeforeExpiry:
          type: integer
          format: int32
          nullable: true
        issuer:
          type: string
          nullable: true
      additionalProperties: false
    ChangeHistoryDetailModel:
      type: object
      properties:
        oldValue:
          type: string
          nullable: true
        newValue:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssueApprovalStateModel:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/IssueApprovalState'
        comment:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssueIsFavoriteModel:
      type: object
      properties:
        isFavorite:
          type: boolean
        comment:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssuesApprovalStateModel:
      type: object
      properties:
        issuesStates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueApprovalState'
          nullable: true
        comment:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssuesFavoriteModel:
      type: object
      properties:
        issues:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        isFavorite:
          type: boolean
      additionalProperties: false
    ChangeObjectType:
      enum:
        - None
        - IssueApprovalState
        - Comment
        - Ticket
        - Exploit
        - Favorite
        - ScanQueueItem
      type: string
    CodeChunkModel:
      type: object
      properties:
        file:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        beginLine:
          type: integer
          format: int32
        endLine:
          type: integer
          format: int32
        beginColumn:
          type: integer
          format: int32
        endColumn:
          type: integer
          format: int32
      additionalProperties: false
    ComponentsSettingsModel:
      type: object
      properties:
        useCustomYaraRules:
          type: boolean
      additionalProperties: false
    ComponentVersionModel:
      type: object
      properties:
        type:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    ConnectionSettingsModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        host:
          type: string
          nullable: true
        trackerType:
          $ref: '#/components/schemas/TrackerType'
        credentials:
          $ref: '#/components/schemas/CredentialsModel'
      additionalProperties: false
    CredentialsModel:
      type: object
      properties:
        authType:
          $ref: '#/components/schemas/AuthType'
        basic:
          $ref: '#/components/schemas/BasicCredentialsModel'
        oAuth:
          $ref: '#/components/schemas/OAuthCredentialsModel'
      additionalProperties: false
    DirectoryContent:
      type: object
      properties:
        _directories:
          type: array
          items:
            $ref: '#/components/schemas/DirectoryContent'
        _files:
          type: array
          items:
            type: string
        _hasContent:
          type: boolean
        name:
          type: string
          nullable: true
      additionalProperties: false
    DotNetProjectType:
      enum:
        - None
        - Solution
        - WebSite
      type: string
    DotNetSettingsModel:
      type: object
      properties:
        projectType:
          $ref: '#/components/schemas/DotNetProjectType'
        solutionFile:
          type: string
          nullable: true
        webSiteFolder:
          type: string
          nullable: true
      additionalProperties: false
    ElasticSearchTarget:
      type: object
      properties:
        Host:
          type: string
          nullable: true
        Port:
          type: integer
          format: int32
        IsEnabled:
          type: boolean
        IsStructured:
          type: boolean
      additionalProperties: false
    EnterpriseLicenseModel:
      type: object
      properties:
        licenseNumber:
          type: integer
          format: int32
        key:
          type: string
          nullable: true
        client:
          type: string
          nullable: true
        currentDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        limitProjects:
          type: integer
          format: int32
        maxAgents:
          type: integer
          format: int32
        languages:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
          nullable: true
        isValid:
          type: boolean
      additionalProperties: false
    ErrorBaseModel:
      type: object
      additionalProperties: false
    ErrorLevel:
      enum:
        - Error
        - Warn
        - Info
        - Debug
        - Trace
      type: string
    ExtendedProjectSettingsModel:
      type: object
      properties:
        isTemp:
          type: boolean
        hasSources:
          type: boolean
        commonSettings:
          $ref: '#/components/schemas/ProjectSettingsUpdatedModel'
        blackBoxSettings:
          $ref: '#/components/schemas/BlackBoxSettingsModel'
      additionalProperties: false
    ExtendedScanStatisticModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        date:
          type: string
          format: date-time
          nullable: true
        progress:
          $ref: '#/components/schemas/ScanProgressModel'
        threatLevel:
          $ref: '#/components/schemas/ThreatLevel'
        high:
          type: integer
          format: int32
        medium:
          type: integer
          format: int32
        low:
          type: integer
          format: int32
        potential:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        filesTotal:
          type: integer
          format: int32
        filesScanned:
          type: integer
          format: int32
        urlsScanned:
          type: integer
          format: int32
        urlsTotal:
          type: integer
          format: int32
        scanDuration:
          type: string
          format: date-span
        policyState:
          $ref: '#/components/schemas/PolicyState'
      additionalProperties: false
    ExternalLdapSignInModel:
      type: object
      properties:
        providerId:
          type: string
          format: uuid
          nullable: true
        user:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        scopeType:
          $ref: '#/components/schemas/AuthScopeType'
        rememberMe:
          type: boolean
      additionalProperties: false
    FieldInfoModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          $ref: '#/components/schemas/FieldName'
        friendlyName:
          type: string
          nullable: true
        value:
          type: array
          items:
            type: string
          nullable: true
        type:
          $ref: '#/components/schemas/FieldType'
        isArray:
          type: boolean
        isRequired:
          type: boolean
        isCustom:
          type: boolean
      additionalProperties: false
    FieldName:
      type: object
      additionalProperties: false
    FieldType:
      enum:
        - Unknown
        - Date
        - DateTime
        - Number
        - Text
        - TextArea
        - Url
        - CheckBox
        - ListBox
        - RadioButtons
        - ComboBox
        - ComboBoxGroup
        - Attachment
        - Tags
        - User
        - Project
        - TicketType
        - Priority
        - Version
      type: string
    FileFolderExclusionsModel:
      type: object
      properties:
        exclusions:
          type: string
          nullable: true
      additionalProperties: false
    FileStorageSettings:
      type: object
      properties:
        maxProjectScanLogsFiles:
          type: integer
          format: int32
        minutesStoringTempProject:
          type: integer
          format: int32
      additionalProperties: false
    GlobalMemberModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        roleId:
          type: integer
          format: int64
      additionalProperties: false
    HealthCheckServiceResult:
      type: object
      properties:
        Service:
          type: string
          nullable: true
        Status:
          $ref: '#/components/schemas/HealthStatus'
        ResponseTime:
          type: number
          format: double
      additionalProperties: false
    HealthCheckSummaryResult:
      type: object
      properties:
        TotalResponseTime:
          type: number
          format: double
        Services:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheckServiceResult'
          nullable: true
      additionalProperties: false
    HealthStatus:
      enum:
        - Unhealthy
        - Degraded
        - Healthy
      type: string
    InitiatorModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InitiatorType'
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        relatedEntityId:
          type: string
          format: uuid
      additionalProperties: false
    InitiatorType:
      enum:
        - User
        - AccessToken
        - System
      type: string
    IssueApprovalState:
      enum:
        - None
        - Approval
        - Discard
        - NotExist
        - AutoApproval
      type: string
    IssueBaseMetadata:
      type: object
      properties:
        key:
          type: string
          nullable: true
        issueType:
          $ref: '#/components/schemas/IssueType'
        level:
          $ref: '#/components/schemas/IssueLevel'
      additionalProperties: false
    IssueDescriptionModelBase:
      type: object
      properties:
        identity:
          type: string
          nullable: true
        issueType:
          $ref: '#/components/schemas/IssueType'
      additionalProperties: false
    IssueExploitDataModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/IssueExploitDataType'
        isBinaryContent:
          type: boolean
        text:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        parameters:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    IssueExploitDataType:
      enum:
        - None
        - Http
        - Script
        - Interaction
      type: string
    IssueLevel:
      enum:
        - None
        - Potential
        - Low
        - Medium
        - High
      type: string
    IssueResourcesModel:
      type: object
      properties:
        descriptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueDescriptionModelBase'
          nullable: true
        metadatas:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueBaseMetadata'
          nullable: true
      additionalProperties: false
    IssueTrackerIntegrationSettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        id:
          type: string
          format: uuid
          nullable: true
        projectId:
          type: string
          format: uuid
        connectionId:
          type: string
          format: uuid
        project:
          type: string
          nullable: true
        ticketTypeId:
          type: string
          nullable: true
        template:
          $ref: '#/components/schemas/TicketTemplateModel'
      additionalProperties: false
    IssueType:
      enum:
        - Unknown
        - Vulnerability
        - Weakness
        - Configuration
        - Fingerprint
        - BlackBox
        - YaraMatch
      type: string
    JavaSettingsModel:
      type: object
      properties:
        parameters:
          type: string
          nullable: true
        unpackUserPackages:
          type: boolean
        userPackagePrefixes:
          type: string
          nullable: true
        version:
          $ref: '#/components/schemas/JavaVersions'
      additionalProperties: false
    JavaVersions:
      enum:
        - v1_8
        - v1_11
      type: string
      # V.4.2: Needed to fix that to avoid enum name generation like _8 and _11
      x-enum-varnames:
        - v1_8
        - v1_11
    JiraTicketLinkModel:
      type: object
      properties:
        projectId:
          type: string
          nullable: true
        trackerType:
          $ref: '#/components/schemas/TrackerType'
        connectionId:
          type: string
          format: uuid
        ticketId:
          type: string
          nullable: true
      additionalProperties: false
    LdapSettingsModel:
      type: object
      properties:
        host:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        sslPort:
          type: integer
          format: int32
        useSsl:
          type: boolean
        baseDn:
          type: string
          nullable: true
        rootUserDn:
          type: string
          nullable: true
        rootUserPassword:
          type: string
          nullable: true
        searchFilter:
          type: string
          nullable: true
        syncUsersInterval:
          type: string
          format: date-span
      additionalProperties: false
    LightMailProfileModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        profileName:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
      additionalProperties: false
    LogLevel:
      enum:
        - Undefined
        - Trace
        - Debug
        - Info
        - Warn
        - Error
        - Fatal
      type: string
    LogSettings:
      type: object
      properties:
        Level:
          $ref: '#/components/schemas/LogLevel'
        Splunk:
          $ref: '#/components/schemas/SplunkTarget'
        ElasticSearch:
          $ref: '#/components/schemas/ElasticSearchTarget'
      additionalProperties: false
    MailAuthentication:
      type: object
      properties:
        isAuthRequired:
          type: boolean
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    MailAuthenticationPatchModel:
      type: object
      properties:
        isAuthRequired:
          type: boolean
          nullable: true
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    MailingProjectSettingsModel:
      type: object
      properties:
        enabled:
          type: boolean
        mailProfileId:
          type: string
          format: uuid
          nullable: true
        emailRecipients:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    MailProfileModel:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/MailAuthentication'
        id:
          type: string
          format: uuid
        credentialsId:
          type: string
          format: uuid
          nullable: true
        profileName:
          type: string
          nullable: true
        compressReport:
          type: boolean
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
        considerCertificateErrors:
          type: boolean
      additionalProperties: false
    MailProfilePatchModel:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/MailAuthenticationPatchModel'
        profileName:
          type: string
          nullable: true
        compressReport:
          type: boolean
          nullable: true
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
          nullable: true
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
          nullable: true
        considerCertificateErrors:
          type: boolean
          nullable: true
      additionalProperties: false
    MemberModel:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        authentication:
          type: string
          nullable: true
        isActive:
          type: boolean
        globalMemberInfo:
          $ref: '#/components/schemas/GlobalMemberModel'
        projectMemberInfos:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMemberModel'
          nullable: true
      additionalProperties: false
    Nullable:
      type: object
      additionalProperties: false
    Oauth1AccessTokenModel:
      type: object
      properties:
        token:
          type: string
          nullable: true
        secret:
          type: string
          nullable: true
      additionalProperties: false
    Oauth1DataModel:
      type: object
      properties:
        privateKey:
          type: string
          nullable: true
        publicKey:
          type: string
          nullable: true
        consumerKey:
          type: string
          nullable: true
      additionalProperties: false
    Oauth1RequestTokenModel:
      type: object
      properties:
        token:
          type: string
          nullable: true
        grantUrl:
          type: string
          nullable: true
      additionalProperties: false
    OAuthCredentialsModel:
      type: object
      properties:
        authData:
          $ref: '#/components/schemas/Oauth1DataModel'
        token:
          type: string
          nullable: true
        tokenSecret:
          type: string
          nullable: true
      additionalProperties: false
    OpenIdResponseMode:
      enum:
        - Query
        - FormPost
        - Fragment
      type: string
    OpenIdResponseType:
      enum:
        - Code
        - CodeIdToken
        - CodeIdTokenToken
        - CodeToken
        - IdToken
        - IdTokenToken
        - None
        - Token
      type: string
    OpenIdSettingsModel:
      type: object
      properties:
        authority:
          type: string
          nullable: true
        clientId:
          type: string
          nullable: true
        clientSecret:
          type: string
          nullable: true
        responseMode:
          $ref: '#/components/schemas/OpenIdResponseMode'
        responseType:
          $ref: '#/components/schemas/OpenIdResponseType'
        externalLogout:
          type: boolean
      additionalProperties: false
    OptionValueModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    PermissionType:
      enum:
        - None
        - ManageIssueTrackerTicket
        - ManagePermissions
        - ViewProject
        - CreateProject
        - DeleteProject
        - ChangeIssueStatus
        - ManageScan
        - ManageGlobalParams
        - DeleteScanResult
        - UpdateProject
        - ManageUpdate
        - ManageIssueTracker
        - DiscardIssueWithoutComment
        - ApproveIssueWithoutComment
        - ManageIssueTrackerIntegration
        - ManageLicense
        - DeleteIssueTrackerTicket
        - WorkWithScanScheduler
        - ReadSettings
      type: string
    PolicyState:
      enum:
        - None
        - Rejected
        - Confirmed
      type: string
    PriorityTypeModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    ProgrammingLanguage:
      enum:
        - DotNet
        - Php
        - Java
        - Html
        - JavaScript
        - All
        - SandBox
        - Binary
        - PlSql
        - TSql
        - Aspx
        - C
        - CPlusPlus
        - ObjectiveC
        - Swift
        - MySql
        - Python
        - CSharp
        - VB
        - Go
        - Kotlin
        - None
      type: string
    ProgrammingLanguageGroup:
      enum:
        - None
        - Java
        - CSharp
        - VB
        - Php
        - JavaScript
        - Python
        - ObjectiveC
        - Swift
        - CAndCPlusPlus
        - Go
        - Kotlin
        - Sql
      type: string
    ProgrammingLanguageGroupModel:
      type: object
      properties:
        languageGroup:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
        isTaintLanguageGroup:
          type: boolean
        isSupportsDependenciesDownloading:
          type: boolean
      additionalProperties: false
    ProjectChangeHistoryRowModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        initiator:
          $ref: '#/components/schemas/InitiatorModel'
        projectId:
          type: string
          format: uuid
          nullable: true
        changeObjectType:
          $ref: '#/components/schemas/ChangeObjectType'
        changedDateTime:
          type: string
          format: date-time
        relatedEntityId:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChangeHistoryDetailModel'
          nullable: true
      additionalProperties: false
    ProjectInfoModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
      additionalProperties: false
    ProjectLocalFilesSourceModel:
      type: object
      properties:
        scanTargetName:
          type: string
          nullable: true
      additionalProperties: false
    ProjectMemberModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        roleId:
          type: integer
          format: int64
        projectId:
          type: string
          format: uuid
        projectName:
          type: string
          nullable: true
      additionalProperties: false
    ProjectMemberWithUserModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserModel'
        roleId:
          type: integer
          format: int64
        projectId:
          type: string
          format: uuid
      additionalProperties: false
    ProjectModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        settingsId:
          type: string
          format: uuid
        creationDate:
          type: string
          format: date-time
      additionalProperties: false
    ProjectPermissions:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: string
          format: uuid
        roleId:
          type: integer
          format: int64
        permissions:
          $ref: '#/components/schemas/PermissionType'
      additionalProperties: false
    ProjectPermissionsModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectId:
          type: string
          format: uuid
        roleId:
          type: integer
          format: int64
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionType'
          nullable: true
      additionalProperties: false
    ProjectSettingsModel:
      type: object
      properties:
        sourceUpdateInfo:
          $ref: '#/components/schemas/ProjectSourceUpdateInfoModel'
        projectName:
          type: string
          nullable: true
        programmingLanguageGroup:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
        whiteBoxSettings:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        downloadDependencies:
          type: boolean
        javaSettings:
          $ref: '#/components/schemas/JavaSettingsModel'
        dotNetSettings:
          $ref: '#/components/schemas/DotNetSettingsModel'
        componentsSettings:
          $ref: '#/components/schemas/ComponentsSettingsModel'
        reportAfterScan:
          $ref: '#/components/schemas/MailingProjectSettingsModel'
        useSastRules:
          type: boolean
        useSecurityPolicies:
          type: boolean
        skipGitIgnoreFiles:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/SourceType'
        localFilesSource:
          $ref: '#/components/schemas/ProjectLocalFilesSourceModel'
        versionControlSource:
          $ref: '#/components/schemas/ProjectVersionControlSourceModel'
        hideSourcesPathAndUserName:
          type: boolean
      additionalProperties: false
    ProjectSettingsUpdatedModel:
      type: object
      properties:
        projectName:
          type: string
          nullable: true
        programmingLanguageGroup:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
        whiteBoxSettings:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        downloadDependencies:
          type: boolean
        javaSettings:
          $ref: '#/components/schemas/JavaSettingsModel'
        dotNetSettings:
          $ref: '#/components/schemas/DotNetSettingsModel'
        componentsSettings:
          $ref: '#/components/schemas/ComponentsSettingsModel'
        reportAfterScan:
          $ref: '#/components/schemas/MailingProjectSettingsModel'
        useSastRules:
          type: boolean
        useSecurityPolicies:
          type: boolean
        skipGitIgnoreFiles:
          type: boolean
        sourceType:
          $ref: '#/components/schemas/SourceType'
        localFilesSource:
          $ref: '#/components/schemas/ProjectLocalFilesSourceModel'
        versionControlSource:
          $ref: '#/components/schemas/ProjectVersionControlSourceModel'
        hideSourcesPathAndUserName:
          type: boolean
      additionalProperties: false
    ProjectSourceUpdateInfoModel:
      type: object
      properties:
        lastDateTimeUpdate:
          type: string
          format: date-time
        updaterInfo:
          $ref: '#/components/schemas/UpdaterInfoModel'
      additionalProperties: false
    ProjectVersionControlSourceModel:
      type: object
      properties:
        scanTargetPath:
          type: string
          nullable: true
        branchName:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        includeSubmodules:
          type: boolean
        sourceControlCredentialsType:
          $ref: '#/components/schemas/SourceControlCredentalsType'
        repositoryType:
          $ref: '#/components/schemas/RepositoryType'
        projectCollection:
          type: string
          nullable: true
        project:
          type: string
          nullable: true
        authenticationToken:
          type: string
          nullable: true
        credentialsId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    ProjectWithExtendedInfoModel:
      type: object
      properties:
        languages:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingLanguage'
          nullable: true
        isPinned:
          type: boolean
        scanStartErrors:
          $ref: '#/components/schemas/ScanStartErrorType'
        scanAppType:
          $ref: '#/components/schemas/ScanAppType'
        lastScan:
          $ref: '#/components/schemas/ExtendedScanStatisticModel'
        prevScan:
          $ref: '#/components/schemas/ExtendedScanStatisticModel'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionType'
          nullable: true
        hasErrors:
          type: boolean
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        settingsId:
          type: string
          format: uuid
        creationDate:
          type: string
          format: date-time
      additionalProperties: false
    ProxySettings:
      type: object
      properties:
        url:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        credentialsId:
          type: string
          format: uuid
          nullable: true
        enabled:
          type: boolean
      additionalProperties: false
    ProxyType:
      enum:
        - Http
        - HttpNoConnect
        - Socks4
        - Socks5
      type: string
    ReportFormatType:
      enum:
        - Html
        - Xml
        - Json
        - Custom
        - Md
      type: string
    ReportGenerateModel:
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/UserReportParametersModel'
        sessionId:
          type: string
          format: uuid
        scanResultId:
          type: string
          format: uuid
          nullable: true
        projectId:
          type: string
          format: uuid
        localeId:
          type: string
          nullable: true
      additionalProperties: false
    ReportTemplateModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        isReadOnly:
          type: boolean
        isFavorite:
          type: boolean
        type:
          $ref: '#/components/schemas/ReportType'
        outputFileName:
          type: string
          nullable: true
        creator:
          $ref: '#/components/schemas/UserModel'
        creationDate:
          type: string
          format: date-time
      additionalProperties: false
    ReportTemplateUpsertModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        outputFileName:
          type: string
          nullable: true
      additionalProperties: false
    ReportType:
      enum:
        - Custom
        - PlainReport
        - AutoCheck
        - Nist
        - Oud4
        - Owasp
        - Owaspm
        - Pcidss
        - Sans
        - Json
        - Xml
      type: string
    RepositoryType:
      enum:
        - None
        - Git
        - TFS
      type: string
    RoleMappingModel:
      type: object
      properties:
        field:
          type: string
          nullable: true
        values:
          type: array
          items:
            type: string
          nullable: true
        globalRoleId:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    RoleModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        isAdmin:
          type: boolean
        isGlobal:
          type: boolean
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionType'
          nullable: true
      additionalProperties: false
    Saml2NameIdPolicy:
      enum:
        - Unspecified
        - Persistent
        - Transient
        - Email
      type: string
    Saml2SettingsModel:
      type: object
      properties:
        issuer:
          type: string
          nullable: true
        allowedIssuer:
          type: string
          nullable: true
        singleSignOnDestination:
          type: string
          nullable: true
        singleLogoutDestination:
          type: string
          nullable: true
        signatureAlgorithm:
          $ref: '#/components/schemas/Saml2SignatureAlgorithm'
        signingCertificateFileName:
          type: string
          nullable: true
        signingCertificatePassword:
          type: string
          nullable: true
        signatureValidationCertificateFileName:
          type: string
          nullable: true
        validateResponse:
          type: boolean
        nameIdPolicy:
          $ref: '#/components/schemas/Saml2NameIdPolicy'
        signAuthnRequest:
          type: boolean
        externalLogout:
          type: boolean
      additionalProperties: false
    Saml2SignatureAlgorithm:
      enum:
        - RsaSha1
        - RsaSha256
        - RsaSha512
        - DsaSha1
      type: string
    SastRulesBaseModel:
      type: object
      properties:
        useRules:
          type: boolean
      additionalProperties: false
    SastRulesModel:
      type: object
      properties:
        rules:
          type: object
          properties:
            None:
              type: string
            Java:
              type: string
            CSharp:
              type: string
            VB:
              type: string
            Php:
              type: string
            JavaScript:
              type: string
            Python:
              type: string
            ObjectiveC:
              type: string
            Swift:
              type: string
            CAndCPlusPlus:
              type: string
            Go:
              type: string
            Kotlin:
              type: string
            Sql:
              type: string
          additionalProperties: false
          nullable: true
        useRules:
          type: boolean
      additionalProperties: false
    ScanAgentConnectionSettingsModel:
      type: object
      properties:
        connectionUri:
          type: string
          nullable: true
      additionalProperties: false
    ScanAgentModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        statusType:
          $ref: '#/components/schemas/ScanAgentStatusType'
        agentName:
          type: string
          nullable: true
        registeredDateTime:
          type: string
          format: date-time
        lastActiveDateTime:
          type: string
          format: date-time
        scanResultId:
          type: string
          format: uuid
          nullable: true
        projectId:
          type: string
          format: uuid
          nullable: true
        projectName:
          type: string
          nullable: true
        progress:
          $ref: '#/components/schemas/ScanProgressModel'
      additionalProperties: false
    ScanAgentStatusType:
      enum:
        - Pending
        - Scan
        - Suspend
        - Inactive
        - Update
        - Stopping
      type: string
    ScanAppType:
      enum:
        - None
        - Binary
        - Configuration
        - Fingerprint
        - Java
        - CSharp
        - PHP
        - PmTaint
        - BlackBox
        - JavaScript
        - DependencyCheck
      type: string
    ScanEnvironmentModel:
      type: object
      properties:
        installatorVersion:
          $ref: '#/components/schemas/ComponentVersionModel'
      additionalProperties: false
    ScanErrorModel:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorBaseModel'
        errorType:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
        isCritical:
          type: boolean
        level:
          $ref: '#/components/schemas/ErrorLevel'
        message:
          type: string
          nullable: true
        scanResultId:
          type: string
          format: uuid
      additionalProperties: false
    ScanMode:
      enum:
        - FromEntryPoint
        - FromPublicProtected
        - Taint
        - Unknown
      type: string
    ScanModuleGroupType:
      enum:
        - WhiteBox
        - BlackBox
      type: string
    ScanModuleType:
      enum:
        - VulnerableSourceCode
        - DataFlowAnalysis
        - PatternMatching
        - Components
        - Configuration
        - BlackBox
      type: string
    ScanProgressModel:
      type: object
      properties:
        stage:
          $ref: '#/components/schemas/Stage'
        subStage:
          type: string
          nullable: true
        value:
          type: integer
          format: int32
      additionalProperties: false
    ScanQueueModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        statusType:
          $ref: '#/components/schemas/ScanStatusType'
        scanType:
          $ref: '#/components/schemas/ScanType'
        agentId:
          type: string
          format: uuid
          nullable: true
        agentName:
          type: string
          nullable: true
        scanResultId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        queuingDateTime:
          type: string
          format: date-time
        finishedDateTime:
          type: string
          format: date-time
          nullable: true
        initiator:
          $ref: '#/components/schemas/InitiatorModel'
        projectName:
          type: string
          nullable: true
      additionalProperties: false
    ScanResultCreationModel:
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        scanDate:
          type: string
          format: date-time
        scanEnvironment:
          $ref: '#/components/schemas/ScanEnvironmentModel'
      additionalProperties: false
    ScanResultModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        settingsId:
          type: string
          format: uuid
        scanDate:
          type: string
          format: date-time
        progress:
          $ref: '#/components/schemas/ScanProgressModel'
        statistic:
          $ref: '#/components/schemas/ScanStatisticModel'
        scanEnvironment:
          $ref: '#/components/schemas/ScanEnvironmentModel'
        isRunFromQueue:
          type: boolean
      additionalProperties: false
    ScanScope:
      enum:
        - Folder
        - Domain
        - Path
      type: string
    ScanSettingsModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectName:
          type: string
          nullable: true
        programmingLanguage:
          $ref: '#/components/schemas/ProgrammingLanguage'
        scanModules:
          type: array
          items:
            $ref: '#/components/schemas/ScanModuleType'
          nullable: true
        customParameters:
          type: string
          nullable: true
        fileFolderExclusions:
          type: string
          nullable: true
        useSastRules:
          type: boolean
        useSecurityPolicies:
          type: boolean
        skipGitIgnoreFiles:
          type: boolean
        downloadDependencies:
          type: boolean
        usePublicAnalysisMethod:
          type: boolean
        blackBoxSettings:
          $ref: '#/components/schemas/BlackBoxSettingsBaseModel'
        javaSettings:
          $ref: '#/components/schemas/JavaSettingsModel'
        dotNetSettings:
          $ref: '#/components/schemas/DotNetSettingsModel'
        componentsSettings:
          $ref: '#/components/schemas/ComponentsSettingsModel'
        sourceSettings:
          $ref: '#/components/schemas/SourceScanSettingsModel'
        emailRecipients:
          type: string
          nullable: true
        sendEmailWithReportsAfterScan:
          type: boolean
        useIssueTrackerIntegration:
          type: boolean
      additionalProperties: false
    ScanStartErrorType:
      enum:
        - None
        - License
        - Sources
        - Language
        - Modules
        - LicenseExpired
        - ScanSchedulerIsLocked
      type: string
    ScanStatisticModel:
      type: object
      properties:
        high:
          type: integer
          format: int32
        medium:
          type: integer
          format: int32
        low:
          type: integer
          format: int32
        potential:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        filesTotal:
          type: integer
          format: int32
        filesScanned:
          type: integer
          format: int32
        urlsScanned:
          type: integer
          format: int32
        urlsTotal:
          type: integer
          format: int32
        scanDuration:
          type: string
          format: date-span
        policyState:
          $ref: '#/components/schemas/PolicyState'
      additionalProperties: false
    ScanStatusType:
      enum:
        - Pending
        - Scheduled
        - Scan
        - Aborted
        - Finished
        - Failed
      type: string
    ScanType:
      enum:
        - Full
        - Incremental
      type: string
    SecurityPoliciesModel:
      type: object
      properties:
        checkSecurityPoliciesAccordance:
          type: boolean
        securityPolicies:
          type: string
          nullable: true
      additionalProperties: false
    SourceControlConnectionSettingsModel:
      type: object
      properties:
        repositoryType:
          $ref: '#/components/schemas/RepositoryType'
        repositoryUrl:
          type: string
          nullable: true
        sourceControlCredentialsType:
          $ref: '#/components/schemas/SourceControlCredentalsType'
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        authenticationToken:
          type: string
          nullable: true
      additionalProperties: false
    SourceControlCredentalsType:
      enum:
        - None
        - Anonymous
        - Password
        - AuthenticationToken
      type: string
    SourceControlScanSettingsModel:
      type: object
      properties:
        repositoryUrl:
          type: string
          nullable: true
        branch:
          type: string
          nullable: true
      additionalProperties: false
    SourceControlSettingsModel:
      type: object
      properties:
        projectCollection:
          type: string
          nullable: true
        project:
          type: string
          nullable: true
        branch:
          type: string
          nullable: true
        includesSubmodules:
          type: boolean
      additionalProperties: false
    SourceScanSettingsModel:
      type: object
      properties:
        scanTargetName:
          type: string
          nullable: true
        sourceType:
          $ref: '#/components/schemas/SourceType'
        vcsSettings:
          $ref: '#/components/schemas/SourceControlScanSettingsModel'
      additionalProperties: false
    SourceType:
      enum:
        - Empty
        - File
        - Folder
        - SourceControl
      type: string
    SplunkTarget:
      type: object
      properties:
        Host:
          type: string
          nullable: true
        Port:
          type: integer
          format: int32
        IsEnabled:
          type: boolean
        IsStructured:
          type: boolean
      additionalProperties: false
    SSOSettings:
      type: object
      properties:
        sessionLifetime:
          type: string
          format: date-span
        userInactivateInterval:
          type: string
          format: date-span
        blockUsersAfterInactiveIntervalExpires:
          type: boolean
      additionalProperties: false
    Stage:
      enum:
        - Unknown
        - VFSSetup
        - Initialize
        - Precheck
        - Scan
        - Finalize
        - Done
        - Failed
        - Aborted
        - Enqueued
        - Autocheck
      type: string
    StartScanModel:
      type: object
      properties:
        scanType:
          $ref: '#/components/schemas/ScanType'
        additionalParameters:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    StatusType:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    TemplateValidationResult:
      type: object
      properties:
        hasErrors:
          type: boolean
        messages:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    TestMailModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        authentication:
          $ref: '#/components/schemas/MailAuthenticationPatchModel'
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
          nullable: true
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
          nullable: true
        considerCertificateErrors:
          type: boolean
          nullable: true
        emailRecipient:
          type: string
          nullable: true
      additionalProperties: false
    ThreatLevel:
      enum:
        - None
        - Potential
        - Low
        - Medium
        - High
      type: string
    TicketModels:
      type: object
      properties:
        key:
          type: string
          nullable: true
        project:
          type: string
          nullable: true
        ticketType:
          type: string
          nullable: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldInfoModel'
          nullable: true
      additionalProperties: false
    TicketTemplateModel:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          nullable: true
      additionalProperties: false
    TicketTypeModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    TrackerModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TrackerType'
        authType:
          type: array
          items:
            $ref: '#/components/schemas/AuthType'
          nullable: true
      additionalProperties: false
    TrackerType:
      enum:
        - Unknown
        - Jira
        - Tfs
        - Youtrack
      type: string
    UpdaterInfoModel:
      type: object
      properties:
        tokenName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
      additionalProperties: false
    UserMappingFieldType:
      enum:
        - Login
        - Name
        - Email
      type: string
    UserMappingModel:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/UserMappingFieldType'
        value:
          type: string
          nullable: true
        canEdit:
          type: boolean
      additionalProperties: false
    UserModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        isRoot:
          type: boolean
        isExternal:
          type: boolean
        isActive:
          type: boolean
        needChangePassword:
          type: boolean
        authProvider:
          $ref: '#/components/schemas/AuthProviderModel'
        lastLoginDate:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    UserReportParametersModel:
      type: object
      properties:
        useFilters:
          type: boolean
        includeDFD:
          type: boolean
        includeGlossary:
          type: boolean
        reportTemplateId:
          type: string
          format: uuid
        formatType:
          $ref: '#/components/schemas/ReportFormatType'
        createPdfPrintVersion:
          type: boolean
      additionalProperties: false
    UserSearchResultModel:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserModel'
        levenshteinDistance:
          type: number
          format: double
      additionalProperties: false
    UserTrackerModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    VulnerabilityFullModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        scanResultId:
          type: string
          format: uuid
        counter:
          type: integer
          format: int64
        function:
          type: string
          nullable: true
        bestPlaceToFix:
          $ref: '#/components/schemas/CodeChunkModel'
        vulnerableExpression:
          $ref: '#/components/schemas/CodeChunkModel'
        type:
          type: string
          nullable: true
        level:
          $ref: '#/components/schemas/IssueLevel'
        scanMode:
          $ref: '#/components/schemas/ScanMode'
        isFavorite:
          type: boolean
        approvalState:
          $ref: '#/components/schemas/IssueApprovalState'
        isSuppressed:
          type: boolean
        isSuspected:
          type: boolean
        issueType:
          $ref: '#/components/schemas/IssueType'
        scanModule:
          $ref: '#/components/schemas/ScanModuleGroupType'
        vulnerableConfiguration:
          $ref: '#/components/schemas/VulnerableConfigurationModel'
        vulnerableComponent:
          $ref: '#/components/schemas/VulnerableComponentFullModel'
        yaraMatch:
          $ref: '#/components/schemas/YaraMatchModel'
        blackBox:
          $ref: '#/components/schemas/BlackboxVulnerabilytyModel'
        jiraTicketLink:
          $ref: '#/components/schemas/JiraTicketLinkModel'
        vulnerableCode:
          $ref: '#/components/schemas/VulnerableCodeModel'
      additionalProperties: false
    VulnerabilityModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        counter:
          type: integer
          format: int64
        isNew:
          type: boolean
        isSecondOrder:
          type: boolean
        type:
          type: string
          nullable: true
        level:
          $ref: '#/components/schemas/IssueLevel'
        scanMode:
          $ref: '#/components/schemas/ScanMode'
        isFavorite:
          type: boolean
        approvalState:
          $ref: '#/components/schemas/IssueApprovalState'
        hasJiraTicket:
          type: boolean
        isSuppressed:
          type: boolean
        isSuspected:
          type: boolean
        vulnerableValue:
          type: string
          nullable: true
        issueType:
          $ref: '#/components/schemas/IssueType'
        function:
          type: string
          nullable: true
        scanModule:
          $ref: '#/components/schemas/ScanModuleGroupType'
        bestPlaceToFixFile:
          type: string
          nullable: true
        bestPlaceToFixLine:
          type: integer
          format: int32
          nullable: true
        entryPointFile:
          type: string
          nullable: true
        entryPointLine:
          type: integer
          format: int32
          nullable: true
        sourceFile:
          type: string
          nullable: true
        sourceBeginLine:
          type: integer
          format: int32
          nullable: true
        sourceEndLine:
          type: integer
          format: int32
          nullable: true
        sourceBeginColumn:
          type: integer
          format: int32
          nullable: true
        sourceEndColumn:
          type: integer
          format: int32
          nullable: true
        vulnerableComponent:
          $ref: '#/components/schemas/VulnerableComponentModel'
        hasAdditionalConditions:
          type: boolean
      additionalProperties: false
    VulnerableCodeModel:
      type: object
      properties:
        entryPoint:
          $ref: '#/components/schemas/CodeChunkModel'
        dataTrace:
          type: array
          items:
            $ref: '#/components/schemas/CodeChunkModel'
          nullable: true
        taintDataEntries:
          type: array
          items:
            $ref: '#/components/schemas/CodeChunkModel'
          nullable: true
        autocheckExploit:
          type: string
          nullable: true
        requestExploit:
          type: string
          nullable: true
        condition:
          type: string
          nullable: true
      additionalProperties: false
    VulnerableComponentFullModel:
      type: object
      properties:
        cveIds:
          type: array
          items:
            type: string
          nullable: true
        component:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    VulnerableComponentModel:
      type: object
      properties:
        component:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    VulnerableConfigurationModel:
      type: object
      properties:
        existingValue:
          type: string
          nullable: true
        recommendedValue:
          type: string
          nullable: true
      additionalProperties: false
    WhiteBoxSettingsModel:
      type: object
      properties:
        searchForVulnerableSourceCodeEnabled:
          type: boolean
        dataFlowAnalysisEnabled:
          type: boolean
        patternMatchingEnabled:
          type: boolean
        searchForVulnerableComponentsEnabled:
          type: boolean
        searchForConfigurationFlawsEnabled:
          type: boolean
      additionalProperties: false
    YaraMatchModel:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        ruleName:
          type: string
          nullable: true
      additionalProperties: false
    YaraRulesBaseModel:
      type: object
      properties:
        useRules:
          type: boolean
      additionalProperties: false
    YaraRulesModel:
      type: object
      properties:
        rules:
          type: string
          nullable: true
        useRules:
          type: boolean
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: Please insert JWT with Bearer into field
      name: Authorization
      in: header