openapi: 3.0.1
info:
  title: projectManagement
  version: 1.0.0
paths:
  /api/configs/yara:
    get:
      tags:
        - Configs
      summary: Get YARA rules
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
    put:
      tags:
        - Configs
      summary: Update YARA rules
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/configs/sast/{language}:
    get:
      tags:
        - Configs
      summary: Get SAST rule
      parameters:
        - name: language
          in: path
          description: Programming language group
          required: true
          schema:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
    put:
      tags:
        - Configs
      summary: Update SAST rule
      parameters:
        - name: language
          in: path
          description: Programming language group
          required: true
          schema:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/license:
    get:
      tags:
        - License
      summary: Current license
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseData'
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseData'
            text/json:
              schema:
                $ref: '#/components/schemas/EnterpriseLicenseData'
        '401':
          description: Unauthorized
    put:
      tags:
        - License
      summary: Update license
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/license/fingerprint:
    get:
      tags:
        - License
      summary: Get server fingerprint
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/license/languageGroups:
    get:
      tags:
        - License
      summary: Get list available programm language groups.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgrammingLanguageGroupModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgrammingLanguageGroupModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgrammingLanguageGroupModel'
        '401':
          description: Unauthorized
  /api/mailing/sendTestEmail:
    post:
      tags:
        - Mailing
      summary: Send test email
      parameters:
        - name: localeId
          in: query
          description: Locale id
          schema:
            type: string
      requestBody:
        description: Test mail model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          application/json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          text/json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TestMailModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
  /api/mailing/mailProfiles:
    get:
      tags:
        - Mailing
      summary: Get all mail profiles
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailProfileModelWithId'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailProfileModelWithId'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailProfileModelWithId'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
    post:
      tags:
        - Mailing
      summary: Create mail profile
      requestBody:
        description: Mail profile model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MailProfileModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
  /api/mailing/mailProfiles/light:
    get:
      tags:
        - Mailing
      summary: Get all light mail profiles
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightMailProfileModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightMailProfileModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightMailProfileModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
  /api/mailing/mailProfiles/{mailProfileId}:
    get:
      tags:
        - Mailing
      summary: Get mail profile model
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MailProfileModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MailProfileModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MailProfileModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
    patch:
      tags:
        - Mailing
      summary: Update mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Mail profile model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MailProfilePatchModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
    delete:
      tags:
        - Mailing
      summary: Delete mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Nullable'
            application/json:
              schema:
                $ref: '#/components/schemas/Nullable'
            text/json:
              schema:
                $ref: '#/components/schemas/Nullable'
  /api/mailing/mailProfiles/{mailProfileId}/usedInProjects:
    get:
      tags:
        - Mailing
      summary: Get all projects when used mail profile
      parameters:
        - name: mailProfileId
          in: path
          description: Mail profile id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BriefProjectInfo'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BriefProjectInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BriefProjectInfo'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
  /api/projects:
    get:
      tags:
        - Projects
      summary: Get projects
      parameters:
        - name: withoutDetails
          in: query
          description: true only for plugins, not for client applications
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectLight'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLight'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectLight'
        '401':
          description: Unauthorized
  /api/projects/light/{name}:
    get:
      tags:
        - Projects
      summary: Get project by name without details
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectLight'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLight'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectLight'
        '401':
          description: Unauthorized
  /api/projects/{projectId}/name:
    get:
      tags:
        - Projects
      summary: Project name
      parameters:
        - name: projectId
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
  /api/projects/{name}/exists:
    get:
      tags:
        - Projects
      summary: Check exists project by name
      parameters:
        - name: name
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
  /api/projects/temp/{expirationInterval}:
    get:
      tags:
        - Projects
      parameters:
        - name: expirationInterval
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
            text/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        '401':
          description: Unauthorized
  /api/projects/{projectId}:
    delete:
      tags:
        - Projects
      summary: Delete project
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/base:
    post:
      tags:
        - Projects
      summary: Create project with base settings
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: uuid
            application/json:
              schema:
                type: string
                format: uuid
            text/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects/{projectId}/blackBoxSettings:
    get:
      tags:
        - Projects
      summary: BlackBox settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtendedBlackBoxSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedBlackBoxSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtendedBlackBoxSettingsModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: BlackBox settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Extended box settings model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtendedBlackBoxSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedBlackBoxSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtendedBlackBoxSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtendedBlackBoxSettingsModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ActionResult'
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
  /api/projects/{projectId}/filePatterns:
    get:
      tags:
        - Projects
      summary: Project`s file patterns
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Project`s file patterns
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: File patterns
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: string
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/*+json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
  /api/projects/{projectId}/defaultSettings:
    get:
      tags:
        - Projects
      summary: Get default settings for existing project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
        '401':
          description: Unauthorized
  /api/projects/{projectId}/exclusions:
    get:
      tags:
        - Projects
      summary: Get exlusions files/dir from scan
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FileFolderExclusionsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/FileFolderExclusionsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/FileFolderExclusionsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update exlusions files/dir from scan
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Exclusions Model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FileFolderExclusionsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/defaultSettings:
    get:
      tags:
        - Projects
      summary: Get default settings
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BaseProjectSettingsModel'
        '401':
          description: Unauthorized
  /api/projects/{projectId}/settings:
    get:
      tags:
        - Projects
      summary: Get project settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectSettingsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectSettingsModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update project settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Project settings model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectSettingsModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/{projectId}/settingsChangingDate:
    get:
      tags:
        - Projects
      summary: Get date of last changing scan settings
      parameters:
        - name: projectId
          in: path
          description: Project Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                format: date-time
            application/json:
              schema:
                type: string
                format: date-time
            text/json:
              schema:
                type: string
                format: date-time
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
  /api/projects/{projectId}/completeConfiguration:
    post:
      tags:
        - Projects
      summary: Complete project configuration
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BaseProjectSettingsModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
  /api/projects/{projectId}/policiesRules:
    get:
      tags:
        - Projects
      summary: Policies rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Policies rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Policy rules template
        content:
          application/json-patch+json:
            schema:
              type: string
          application/json:
            schema:
              type: string
          text/json:
            schema:
              type: string
          application/*+json:
            schema:
              type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/{projectId}/securityPolicies:
    get:
      tags:
        - Projects
      summary: Get policies rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SecurityPoliciesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityPoliciesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SecurityPoliciesModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update policies rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Security policies model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SecurityPoliciesModel'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
  /api/projects/{projectId}/sastRules:
    get:
      tags:
        - Projects
      summary: Get SAST rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SastRulesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/SastRulesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SastRulesModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update SAST rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: SAST rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SastRulesBaseModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/{projectId}/yaraRules:
    get:
      tags:
        - Projects
      summary: Get YARA rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/YaraRulesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/YaraRulesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/YaraRulesModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update YARA rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: SAST rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/YaraRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/YaraRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/YaraRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/YaraRulesBaseModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/{projectId}/analysisRules:
    get:
      tags:
        - Projects
      summary: Get analysis rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AnalysisRulesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisRulesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/AnalysisRulesModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update analysis rules
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Analysis rules model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AnalysisRulesBaseModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/securityPoliciesTemplate:
    get:
      tags:
        - Projects
      summary: Get policies rules template
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
  /api/projects/yaraRulesTemplate:
    get:
      tags:
        - Projects
      summary: Get YARA rules template
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
  /api/projects/sastRulesTemplate/{language}:
    get:
      tags:
        - Projects
      summary: Get policies rules template
      parameters:
        - name: language
          in: path
          description: Project id
          required: true
          schema:
            $ref: '#/components/schemas/ProgrammingLanguageGroup'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '401':
          description: Unauthorized
  /api/projects/{projectId}/issues/{issueId}/state:
    put:
      tags:
        - Projects
      summary: Change issue state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Vulnerability id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing approval status
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueApprovalStateModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/{projectId}/issues/{issueId}/favorite:
    put:
      tags:
        - Projects
      summary: Change issue favorite state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          description: Vulnerability id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing favorite status
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssueIsFavoriteModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/{projectId}/issues/state:
    put:
      tags:
        - Projects
      summary: Change issues state
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details of changing approval statuses
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeIssuesApprovalStateModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /api/projects/{projectId}/tracker/extendedSettings:
    get:
      tags:
        - Projects
      summary: Get issue tracker integration settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettings'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettings'
        '401':
          description: Unauthorized
    put:
      tags:
        - Projects
      summary: Update issue tracker integration settings
      parameters:
        - name: projectId
          in: path
          description: Project id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Project id
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettings'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettings'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettings'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtendedIssueTrackerIntegrationSettings'
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '401':
          description: Unauthorized
  /api/projects/activeScans:
    get:
      tags:
        - Projects
      summary: Active scans
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveScanModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveScanModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveScanModel'
        '401':
          description: Unauthorized
  /api/projects/{projectId}/issues/{issueId}/resources:
    get:
      tags:
        - Projects
      summary: Get issue`s descriptions and metadatas
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: issueId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: localeId
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IssueResourcesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResourcesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/IssueResourcesModel'
        '401':
          description: Unauthorized
  /api/projects/{projectId}/pin:
    post:
      tags:
        - Projects
      summary: Pin project for current user
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/projects/{projectId}/unpin:
    post:
      tags:
        - Projects
      summary: Unpin project for current user
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/templates:
    get:
      tags:
        - Reports
      summary: Get all reports templates
      parameters:
        - name: localeId
          in: query
          schema:
            type: string
        - name: withContent
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplateModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplateModel'
        '401':
          description: Unauthorized
    post:
      tags:
        - Reports
      summary: Create report template
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/templates/{id}:
    get:
      tags:
        - Reports
      summary: Get report template by id
      parameters:
        - name: id
          in: path
          description: Report id
          required: true
          schema:
            type: string
            format: uuid
        - name: localeId
          in: query
          description: Locale id
          schema:
            type: string
        - name: needAddCss
          in: query
          description: Add CSS styles?
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Reports
      summary: Update report template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateUpsertModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    delete:
      tags:
        - Reports
      summary: Delete report template by id
      parameters:
        - name: id
          in: path
          description: Report id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/templates/{type}:
    get:
      tags:
        - Reports
      summary: Get report template by type
      operationId: TemplateByType
      parameters:
        - name: type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ReportType'
        - name: localeId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '401':
          description: Unauthorized
  /api/reports/userTemplates/{name}:
    get:
      tags:
        - Reports
      summary: Get user report template by name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: localeId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportTemplateModel'
        '401':
          description: Unauthorized
  /api/reports/templates/check:
    post:
      tags:
        - Reports
      summary: Check template on errors. Pass template text in body
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TemplateValidationResult'
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateValidationResult'
            text/json:
              schema:
                $ref: '#/components/schemas/TemplateValidationResult'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/generate:
    post:
      tags:
        - Reports
      summary: "Generate report\r\nPass sessionId in model for progress notifications.\r\nsessionId will be removed when the report generation process becomes asynchronous"
      requestBody:
        description: Report generate model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportGenerateModel'
      responses:
        '200':
          description: OK
          content:
            application/octet-stream: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/preview:
    post:
      tags:
        - Reports
      summary: Preview report
      parameters:
        - name: localeId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportTemplateModel'
      responses:
        '200':
          description: OK
          content:
            application/octet-stream: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
  /api/reports/parameters:
    get:
      tags:
        - Reports
      summary: Get report parameters for current user
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserReportParametersModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserReportParametersModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserReportParametersModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
    put:
      tags:
        - Reports
      summary: Save report parameters for current user
      requestBody:
        description: Report parameters model
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserReportParametersModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiErrorModel'
        '401':
          description: Unauthorized
components:
  schemas:
    ActionResult:
      type: object
      additionalProperties: false
    ActiveScanModel:
      type: object
      properties:
        scanResultId:
          type: string
          format: uuid
        progress:
          $ref: '#/components/schemas/ScanProgress'
        project:
          $ref: '#/components/schemas/ProjectLight'
      additionalProperties: false
    AdditionalHttpHeader:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    AdditionalParams:
      type: object
      additionalProperties: false
    AnalysisRulesBaseModel:
      type: object
      properties:
        sastRules:
          $ref: '#/components/schemas/SastRulesBaseModel'
        yaraRules:
          $ref: '#/components/schemas/YaraRulesBaseModel'
      additionalProperties: false
    AnalysisRulesModel:
      type: object
      properties:
        sastRules:
          $ref: '#/components/schemas/SastRulesModel'
        yaraRules:
          $ref: '#/components/schemas/YaraRulesModel'
      additionalProperties: false
    ApiErrorModel:
      type: object
      properties:
        errorCode:
          $ref: '#/components/schemas/ApiErrorType'
        details:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    ApiErrorType:
      enum:
        - None
        - INCORRECT_USER_AND_PASSWORD
        - USER_ID_IS_EMPTY
        - MEMBER_ALREADY_EXISTS
        - PROJECT_ROLE_PERMISSIONS_ALREADY_EXISTS
        - ACCESS_TOKEN_IS_INCORRECT
        - ACCESS_TOKEN_WITH_SAME_NAME_ALREADY_EXISTS
        - PASSWORD_IS_INCORRECT
        - USER_IS_INCORRECT
        - INITIATOR_NOT_FOUND
        - ROOT_LOGIN_VIA_VIEWER_IS_NOT_ALLOWED
        - CREDENTIAL_STORE_IS_UNVAILABLE_OR_TAINTED
        - EXT_AUTH_PROVIDERS_GET_ERROR
        - EXT_AUTH_PROVIDERS_BY_SAME_SCHEME_LIMIT_ERROR
        - EXT_AUTH_PROVIDERS_AT_LEAST_ONE_ENABLED_LIMIT_ERROR
        - EXT_AUTH_PROVIDER_GET_NOT_FOUND
        - EXT_AUTH_PROVIDER_GET_ERROR
        - EXT_AUTH_PROVIDER_UPDATE_ERROR
        - EXT_AUTH_PROVIDER_DELETE_ERROR
        - EXT_AUTH_PROVIDER_IS_INCORRECT
        - EXT_AUTH_PROVIDER_NAME_IS_EMPTY
        - EXT_AUTH_PROVIDER_NAME_LENGTH_LIMIT
        - EXT_AUTH_SETTINGS_IS_INCORRECT
        - EXT_AUTH_SETTINGS_OPENID_AUTHORITY_IS_INCORRECT
        - EXT_AUTH_SETTINGS_OPENID_CLIENT_ID_IS_INCORRECT
        - EXT_AUTH_SETTINGS_OPENID_CLIENT_SECRET_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_ISSUER_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_ALLOWED_ISSUER_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_ACS_URL_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_LOGOUT_URL_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_SIGN_VALIDATION_CERT_IS_EMPTY
        - EXT_AUTH_SETTINGS_SAML2_SIGN_VALIDATION_CERT_SIZE_LIMIT
        - EXT_AUTH_SETTINGS_SAML2_SIGNING_CERT_IS_EMPTY
        - EXT_AUTH_SETTINGS_SAML2_SIGNING_CERT_SIZE_LIMIT
        - EXT_AUTH_SETTINGS_SAML2_NAMEID_POLICY_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_SIGN_ALG_IS_INCORRECT
        - EXT_AUTH_SETTINGS_SAML2_SIGN_ALG_IS_EMPTY
        - EXT_AUTH_SETTINGS_LDAP_HOST_IS_INCORRECT
        - EXT_AUTH_SETTINGS_LDAP_HOST_HAS_SCHEMA
        - EXT_AUTH_SETTINGS_LDAP_PORT_IS_INCORRECT
        - EXT_AUTH_SETTINGS_LDAP_SSL_PORT_IS_INCORRECT
        - EXT_AUTH_SETTINGS_LDAP_BASE_DN_IS_INCORRECT
        - EXT_AUTH_SETTINGS_TEST_CONNECTION_FAILED
        - EXT_AUTH_ROLE_MAPPINGS_EMPTY_FIELDS
        - EXT_AUTH_ROLE_MAPPINGS_NO_GLOBAL_ROLES
        - EXT_AUTH_SIGNIN_ERROR
        - EXT_AUTH_SIGNIN_CALLBACK_ERROR
        - EXT_AUTH_SIGNIN_PROVIDER_IS_EMPTY
        - EXT_AUTH_SIGNIN_PROVIDER_IS_EMPTY_OR_DISABLED
        - EXT_AUTH_SIGNIN_SCOPE_TYPE_IS_INCORRECT
        - EXT_AUTH_SIGNIN_PROVIDER_IS_NOT_AUTHENTICATED
        - EXT_AUTH_SIGNIN_INVALID_CREDENTIALS
        - EXT_AUTH_SIGNIN_INVALID_SESSION_ID
        - EXT_AUTH_SIGNIN_SCHEME_IS_INCORRECT
        - EXT_AUTH_SIGNIN_OPENID_INVALID_CONFIGURATION
        - EXT_AUTH_SIGNIN_OPENID_TOKEN_EXPIRED
        - EXT_AUTH_SIGNIN_OPENID_INCONSISTENT_RESPONSE_MODE_AND_TYPE
        - EXT_AUTH_SIGNIN_SAML2_SETTINGS_IS_EMPTY
        - EXT_AUTH_SIGNIN_SAML2_RESPONSE_STATUS_ERROR
        - EXT_AUTH_SIGNIN_SAML2_INVALID_SIGNATURE
        - EXT_AUTH_SIGNIN_LDAP_SSL_REQUIRED
        - EXT_AUTH_SIGNIN_LDAP_SETTINGS_IS_EMPTY
        - EXT_AUTH_SIGN_OUT_ERROR
        - EXT_AUTH_SIGN_OUT_PROVIDER_IS_EMPTY
        - EXT_AUTH_SIGN_OUT_TOKEN_NOT_FOUND
        - EXT_AUTH_SIGN_OUT_SCHEME_IS_INCORRECT
        - EXT_AUTH_SIGN_OUT_OPENID_ERROR
        - EXT_AUTH_SIGN_OUT_SAML2_ERROR
        - EXT_AUTH_SIGN_OUT_SAML2_EMPTY_LOGOUT_URL_ERROR
        - EXT_AUTH_SESSION_GET_ERROR
        - EXT_AUTH_SESSION_CLAIMS_NOT_DEFINED
        - EXT_AUTH_SESSION_NOT_FOUND
        - EXT_AUTH_SESSION_EXPIRED
        - EXT_AUTH_SESSION_PROVIDER_NOT_FOUND
        - EXT_AUTH_SESSION_USER_NOT_EQUAL
        - EXT_AUTH_METADATA_SAML2_ERROR
        - EXT_AUTH_USER_PROVISION_ERROR
        - EXT_AUTH_USER_PROVISION_USER_IS_NOT_DEFINED
        - EXT_AUTH_USER_PROVISION_USER_LOGIN_FIELD_IS_NOT_MAPPED
        - EXT_AUTH_USER_PROVISION_NAME_FIELD_IS_NOT_MAPPED
        - UPDATE_PACKAGE_VERSION_IS_ALREADY_UPLOADED
        - UPDATE_PACKAGE_UPLOADED_IS_ALREADY_STARTED
        - UPDATE_PACKAGE_UNKNOWN_PRODUCT
        - UPDATE_PACKAGE_VERSION_INVALID
        - UPDATE_PACKAGE_VERSION_IS_NOT_UPLOADED
        - UPDATE_SERVER_PROCESS_RUN_TIMEOUT
        - UPDATE_SERVER_PARAMETERS_INVALID
        - UPDATE_SERVER_INSTALLER_EXIT_WITH_ERROR
        - UPDATE_SERVER_PACKAGE_IS_INCORRECT
        - UPDATE_SERVER_NOT_ENOUGH_SPACE
        - CERTIFICATE_FILE_IS_EMPTY
        - CERTIFICATE_IS_ALREADY_INSTALLED
        - CERTIFICATE_IS_NOT_VALID
        - URI_IS_NOT_VALID
        - PROJECT_WITH_SAME_NAME_ALREADY_EXISTS
        - UNEXPECTED_SCAN_STAGE
        - PROJECT_NOT_FOUND
        - INVALID_JSON_FIELDS
        - INCORRECT_SAST_RULES
        - UNEXPECTED_LANGUAGE
        - MAIL_PROFILES_NOT_EXISTS
        - MAIL_PROFILE_NOT_FOUND
        - ISSUE_TRACKER_CONNECTION_NOT_FOUND
        - ISSUE_TRACKER_CONNECTION_SETTINGS_NOT_SET
        - ISSUE_TRACKER_SETTINGS_ID_NOT_SET
        - ISSUE_TRACKER_CREDENTIALS_NOT_SET
        - ISSUE_TRACKER_HOST_IS_INCORRECT
        - ISSUE_TRACKER_OAUTH_DATA_NOT_SET
        - ISSUE_TRACKER_TRACKER_NOT_FOUND
        - ISSUE_TRACKER_TRACKER_NOT_FOUND_WITH_OAUTH
        - ISSUE_TRACKER_INVALID_TICKET_LINK
        - ISSUE_TRACKER_IMPOSSIBLE_SKIP_UPDATE_CREDENTIALS
        - ISSUE_TRACKER_UNSUPPORTED_FIELDS_COFIGURATION
        - ISSUE_TRACKER_TICKET_CREATION_FAILED
        - ISSUE_TRACKER_PRIORITIES_GETTING_FAILED
        - ISSUE_TRACKER_USERS_GETTING_FAILED
        - ISSUE_TRACKER_STATUSES_GETTING_FAILED
        - ISSUE_TRACKER_FIELDS_GETTING_FAILED
        - ISSUE_TRACKER_OPTIONS_GETTING_FAILED
        - ISSUE_TRACKER_EXISTING_TICKETS_GETTING_FAILED
        - ISSUE_TRACKER_COMPONENTS_GETTING_FAILED
        - ISSUE_TRACKER_CAPTCHA_CHALLENGE
        - ISSUE_TRACKER_AUTHENTICATION_DENIED_DETAILED
        - ISSUE_TRACKER_AUTHENTICATION_DENIED
        - ISSUE_TRACKER_AUTHENTICATION_FAILED
        - ISSUE_TRACKER_OAUTH_SETTINGS_INVALID
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_GETTING_ACCESS_TOKEN_FAILED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_INVALID_ACCESS_TOKEN_RETURNED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_GETTING_REQUEST_TOKEN_FAILED
        - ISSUE_TRACKER_OAUTH_AUTHENTICATION_INVALID_REQUEST_TOKEN_RETURNED
        - FS_SOURCE_IS_BUSY
        - DIRECTORY_NOT_FOUND
        - ISSUE_ATTACH_TICKET_LINK_FAILED
        - COMMENT_POLICY_FAILED_COMMENT_IS_EMPTY
        - PROJECTS_COUNT_LIMITED_BY_LICENSE
        - LICENSE_FILE_IS_INVALID
        - LICENSE_FINGERPRINT_ERROR
        - UNKNOWN_SOURCE_VERSION_CONTROL_SYSTEM
        - SOURCE_VERSION_CONTROL_SYSTEM_ERROR
        - INVALID_VERSION_CONTROL_SYSTEM_SETTINGS
        - SCAN_AGENT_NOT_FOUND
        - SCAN_ALREADY_SCHEDULED
        - INCORRECT_AGENT_STATUS
        - SCAN_AGENT_WAS_SUSPENDED
        - SCAN_AGENT_IS_SCANNING
        - SCAN_NOT_FOUND
        - ACTIVE_SCAN_AGENTS_NOT_FOUND
        - SCAN_AGENT_IS_ACTIVE
        - SERVER_CERTIFICATE_NOT_FOUND
        - FILESYSTEM_ERROR_ACCESS_DENIED
        - VAULT_CREDENTIALS_NOT_FOUND
        - REPORT_TEMPLATE_NOT_FOUND
        - REPORT_GENERATE_FAILED
        - REPORT_TEMPLATE_INVALID
        - REPORT_TEMPLATE_UNKNOWN_FORMAT
        - REPORT_INCORRECT_PARAMETERS
        - REPORT_TEMPLATE_WITH_SAME_NAME_ALREADY_EXISTS
        - REPORT_TEMPLATE_FILE_NAME_INCORRECT_MACROS
        - INVALID_VERSION_CONTROL_SYSTEM_CONNECTION_SETTINGS
        - COULD_NOT_STORE_PROJECT
        - COULD_NOT_STORE_SCAN_SETTINGS
        - FILES_FOR_DOWNLOAD_NOT_FOUND
        - PROJECTS_FILES_NOT_FOUND
        - INVALID_UPLOAD_PATH
        - INVALID_PATH_PARAMETER
        - COULD_NOT_CHECKOUT_PROJECT
        - USER_ID_IS_INCORRECT
      type: string
      format: ''
    AuthProvider:
      type: object
      properties:
        Id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        scheme:
          $ref: '#/components/schemas/AuthProviderScheme'
        enabled:
          type: boolean
      additionalProperties: false
    AuthProviderScheme:
      enum:
        - OpenIdConnect
        - Saml2
        - Ldap
      type: string
      format: ''
    AuthType:
      enum:
        - Form
        - Http
        - None
        - RawCookie
      type: string
      format: ''
    BaseProjectSettingsModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        programmingLanguageGroup:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
        projectUrl:
          type: string
          nullable: true
        whiteBox:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        blackBoxEnabled:
          type: boolean
        blackBox:
          $ref: '#/components/schemas/BlackBoxSettingsModel'
      additionalProperties: false
    BlackBoxAuthenticationModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AuthType'
      additionalProperties: false
    BlackBoxProxySettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        type:
          $ref: '#/components/schemas/ProxyType'
        host:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    BlackBoxScanLevel:
      enum:
        - None
        - Fast
        - Normal
        - Full
      type: string
      format: ''
    BlackBoxSettingsModel:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/AuthType'
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        loginKey:
          type: string
          nullable: true
        passwordKey:
          type: string
          nullable: true
        testUrl:
          type: string
          nullable: true
        domainName:
          type: string
          nullable: true
        formUrl:
          type: string
          nullable: true
        formXpath:
          type: string
          nullable: true
        validationRegexTemplate:
          type: string
          nullable: true
        cookie:
          type: string
          nullable: true
        runAutocheckAfterScan:
          type: boolean
      additionalProperties: false
    BriefProjectInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectName:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssueApprovalStateModel:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/IssueApprovalState'
        comment:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssueIsFavoriteModel:
      type: object
      properties:
        isFavorite:
          type: boolean
        comment:
          type: string
          nullable: true
      additionalProperties: false
    ChangeIssuesApprovalStateModel:
      type: object
      properties:
        issuesStates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueApprovalState'
          nullable: true
        comment:
          type: string
          nullable: true
      additionalProperties: false
    EnterpriseLicenseData:
      type: object
      properties:
        key:
          type: string
          nullable: true
        circuit:
          type: string
          nullable: true
        currentDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        limitProjects:
          type: integer
          format: int32
        languages:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingLanguage'
          nullable: true
        isBlackBoxDisabled:
          type: boolean
        isValid:
          type: boolean
        licenseNumber:
          type: integer
          format: int32
      additionalProperties: false
    ExtendedBlackBoxSettingsModel:
      type: object
      properties:
        isActive:
          type: boolean
        runAutocheckAfterScan:
          type: boolean
        host:
          type: string
          nullable: true
        scanLevel:
          $ref: '#/components/schemas/BlackBoxScanLevel'
        scanScope:
          $ref: '#/components/schemas/ScanScope'
        additionalHttpHeaders:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalHttpHeader'
          nullable: true
        authentication:
          $ref: '#/components/schemas/BlackBoxAuthenticationModel'
        proxySettings:
          $ref: '#/components/schemas/BlackBoxProxySettingsModel'
      additionalProperties: false
    ExtendedIssueTrackerIntegrationSettings:
      type: object
      properties:
        isActive:
          type: boolean
        issueTrackerSettings:
          $ref: '#/components/schemas/IssueTrackerIntegrationSettings'
      additionalProperties: false
    FieldName:
      type: object
      additionalProperties: false
    FieldSettings:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/FieldName'
        values:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    FileFolderExclusionsModel:
      type: object
      properties:
        exclusions:
          type: string
          nullable: true
      additionalProperties: false
    IssueApprovalState:
      enum:
        - None
        - Approval
        - Discard
        - NotExist
        - AutoApproval
      type: string
      format: ''
    IssueBaseMetadata:
      type: object
      properties:
        key:
          type: string
          nullable: true
        issueType:
          $ref: '#/components/schemas/IssueType'
        level:
          $ref: '#/components/schemas/IssueLevel'
      additionalProperties: false
    IssueDescriptionModelBase:
      type: object
      properties:
        identity:
          type: string
          nullable: true
        issueType:
          $ref: '#/components/schemas/IssueType'
      additionalProperties: false
    IssueLevel:
      enum:
        - None
        - Potential
        - Low
        - Medium
        - High
      type: string
      format: ''
    IssueResourcesModel:
      type: object
      properties:
        descriptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueDescriptionModelBase'
          nullable: true
        metadatas:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueBaseMetadata'
          nullable: true
      additionalProperties: false
    IssueTrackerIntegrationSettings:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        triggerId:
          type: string
          format: uuid
          nullable: true
        connectionId:
          type: string
          format: uuid
        project:
          type: string
          nullable: true
        ticketType:
          type: string
          nullable: true
        template:
          $ref: '#/components/schemas/TicketTemplate'
      additionalProperties: false
    IssueType:
      enum:
        - Unknown
        - Vulnerability
        - Weakness
        - Configuration
        - Fingerprint
        - BlackBox
        - YaraMatch
      type: string
      format: ''
    LightMailProfileModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        profileName:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
      additionalProperties: false
    MailAuthentication:
      type: object
      properties:
        isAuthRequired:
          type: boolean
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    MailAuthenticationPatch:
      type: object
      properties:
        isAuthRequired:
          type: boolean
          nullable: true
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    MailingProjectSettings:
      type: object
      properties:
        state:
          type: boolean
        mailProfileId:
          type: string
          format: uuid
          nullable: true
        emailRecipients:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    MailProfileModel:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/MailAuthentication'
        profileName:
          type: string
          nullable: true
        compressReport:
          type: boolean
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
        considerCertificateErrors:
          type: boolean
      additionalProperties: false
    MailProfileModelWithId:
      type: object
      properties:
        id:
          type: string
          format: uuid
        authentication:
          $ref: '#/components/schemas/MailAuthentication'
        profileName:
          type: string
          nullable: true
        compressReport:
          type: boolean
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
        considerCertificateErrors:
          type: boolean
      additionalProperties: false
    MailProfilePatchModel:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/MailAuthenticationPatch'
        profileName:
          type: string
          nullable: true
        compressReport:
          type: boolean
          nullable: true
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
          nullable: true
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
          nullable: true
        considerCertificateErrors:
          type: boolean
          nullable: true
      additionalProperties: false
    Nullable:
      type: object
      additionalProperties: false
    ProgrammingLanguage:
      enum:
        - DotNet
        - Php
        - Java
        - Html
        - JavaScript
        - All
        - SandBox
        - Binary
        - PlSql
        - TSql
        - Aspx
        - C
        - CPlusPlus
        - ObjectiveC
        - Swift
        - MySql
        - Python
        - CSharp
        - VB
        - Go
        - Kotlin
        - None
      type: string
      format: ''
    ProgrammingLanguageGroup:
      enum:
        - None
        - Java
        - CSharp
        - VB
        - Php
        - JavaScript
        - Python
        - ObjectiveC
        - Swift
        - CAndCPlusPlus
        - Go
        - Kotlin
        - Sql
      type: string
      format: ''
    ProgrammingLanguageGroupModel:
      type: object
      properties:
        languageGroup:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
        isTaintLanguageGroup:
          type: boolean
        isSupportsDependenciesDownloading:
          type: boolean
      additionalProperties: false
    ProjectLight:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        settingsId:
          type: string
          format: uuid
        languages:
          type: array
          items:
            $ref: '#/components/schemas/ProgrammingLanguage'
          nullable: true
        isPinned:
          type: boolean
        hasSources:
          type: boolean
        scanAppType:
          $ref: '#/components/schemas/ScanAppType'
      additionalProperties: false
    ProjectSettingsModel:
      type: object
      properties:
        projectSource:
          $ref: '#/components/schemas/ProjectSourceModel'
        projectName:
          type: string
          nullable: true
        programmingLanguageGroup:
          $ref: '#/components/schemas/ProgrammingLanguageGroup'
        whiteBoxSettings:
          $ref: '#/components/schemas/WhiteBoxSettingsModel'
        launchParameters:
          type: string
          nullable: true
        useAvailablePublicAndProtectedMethods:
          type: boolean
        isLoadDependencies:
          type: boolean
        additionalParams:
          $ref: '#/components/schemas/AdditionalParams'
        reportAfterScan:
          $ref: '#/components/schemas/MailingProjectSettings'
      additionalProperties: false
    ProjectSourceModel:
      type: object
      properties:
        sourceType:
          $ref: '#/components/schemas/SourceType'
        lastDateTimeUpdate:
          type: string
          format: date-time
        updaterInfo:
          $ref: '#/components/schemas/UpdaterInfo'
        isHidePathAndUserName:
          type: boolean
      additionalProperties: false
    ProxyType:
      enum:
        - Http
        - HttpNoConnect
        - Socks4
        - Socks5
      type: string
      format: ''
    ReportFormatType:
      enum:
        - Html
        - Xml
        - Json
        - Custom
        - Pdf
        - Md
      type: string
      format: ''
    ReportGenerateModel:
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/UserReportParametersBaseModel'
        sessionId:
          type: string
          format: uuid
        scanResultId:
          type: string
          format: uuid
          nullable: true
        projectId:
          type: string
          format: uuid
        localeId:
          type: string
          nullable: true
      additionalProperties: false
    ReportTemplateModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        isReadOnly:
          type: boolean
        isFavorite:
          type: boolean
        type:
          $ref: '#/components/schemas/ReportType'
        outputFileName:
          type: string
          nullable: true
        creator:
          $ref: '#/components/schemas/User'
        creationDate:
          type: string
          format: date-time
      additionalProperties: false
    ReportTemplateUpsertModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        outputFileName:
          type: string
          nullable: true
      additionalProperties: false
    ReportType:
      enum:
        - Custom
        - PlainReport
        - AutoCheck
        - Nist
        - Oud4
        - Owasp
        - Owaspm
        - Pcidss
        - Sans
      type: string
      format: ''
    SastRulesBaseModel:
      type: object
      properties:
        useRules:
          type: boolean
      additionalProperties: false
    SastRulesModel:
      type: object
      properties:
        rules:
          type: object
          properties:
            None:
              type: string
            Java:
              type: string
            CSharp:
              type: string
            VB:
              type: string
            Php:
              type: string
            JavaScript:
              type: string
            Python:
              type: string
            ObjectiveC:
              type: string
            Swift:
              type: string
            CAndCPlusPlus:
              type: string
            Go:
              type: string
            Kotlin:
              type: string
            Sql:
              type: string
          additionalProperties: false
          nullable: true
        useRules:
          type: boolean
      additionalProperties: false
    ScanAppType:
      enum:
        - None
        - Binary
        - Configuration
        - Fingerprint
        - Java
        - CSharp
        - PHP
        - PmTaint
        - BlackBox
        - JavaScript
        - DependencyCheck
      type: string
      format: ''
    ScanProgress:
      type: object
      properties:
        stage:
          $ref: '#/components/schemas/Stage'
        subStage:
          type: string
          nullable: true
        value:
          type: integer
          format: int32
      additionalProperties: false
    ScanScope:
      enum:
        - Folder
        - Domain
        - Path
      type: string
      format: ''
    SecurityPoliciesModel:
      type: object
      properties:
        checkSecurityPoliciesAccordance:
          type: boolean
        securityPolicies:
          type: string
          nullable: true
      additionalProperties: false
    SourceType:
      enum:
        - Empty
        - File
        - Folder
        - SourceControl
      type: string
      format: ''
    Stage:
      enum:
        - Unknown
        - VFSSetup
        - Initialize
        - Precheck
        - Scan
        - Finalize
        - Done
        - Failed
        - Aborted
        - Enqueued
        - Autocheck
      type: string
      format: ''
    TemplateValidationResult:
      type: object
      properties:
        hasErrors:
          type: boolean
        messages:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    TestMailModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        authentication:
          $ref: '#/components/schemas/MailAuthenticationPatch'
        subject:
          type: string
          nullable: true
        smtpServerAddress:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
          nullable: true
        senderEmail:
          type: string
          nullable: true
        enableSsl:
          type: boolean
          nullable: true
        considerCertificateErrors:
          type: boolean
          nullable: true
        emailRecipient:
          type: string
          nullable: true
      additionalProperties: false
    TicketTemplate:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldSettings'
          nullable: true
      additionalProperties: false
    UpdaterInfo:
      type: object
      properties:
        tokenName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
      additionalProperties: false
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        isRoot:
          type: boolean
        isExternal:
          type: boolean
        isActive:
          type: boolean
        needChangePassword:
          type: boolean
        authProvider:
          $ref: '#/components/schemas/AuthProvider'
        lastLoginDate:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    UserReportParametersBaseModel:
      type: object
      properties:
        useFilters:
          type: boolean
        includeDFD:
          type: boolean
        includeGlossary:
          type: boolean
        reportTemplateId:
          type: string
          format: uuid
        formatType:
          $ref: '#/components/schemas/ReportFormatType'
        createPdfPrintVersion:
          type: boolean
        includeSuppressedVulnerabilities:
          type: boolean
        includeDiscardedVulnerabilities:
          type: boolean
        includeSuspectedVulnerabilities:
          type: boolean
      additionalProperties: false
    UserReportParametersModel:
      type: object
      properties:
        saveAsPath:
          type: string
          nullable: true
        useFilters:
          type: boolean
        includeDFD:
          type: boolean
        includeGlossary:
          type: boolean
        reportTemplateId:
          type: string
          format: uuid
        formatType:
          $ref: '#/components/schemas/ReportFormatType'
        createPdfPrintVersion:
          type: boolean
        includeSuppressedVulnerabilities:
          type: boolean
        includeDiscardedVulnerabilities:
          type: boolean
        includeSuspectedVulnerabilities:
          type: boolean
      additionalProperties: false
    WhiteBoxSettingsModel:
      type: object
      properties:
        searchForVulnerableSourceCodeEnabled:
          type: boolean
        dataFlowAnalysisEnabled:
          type: boolean
        patternMatchingEnabled:
          type: boolean
        searchForVulnerableComponentsEnabled:
          type: boolean
        searchForConfigurationFlawsEnabled:
          type: boolean
      additionalProperties: false
    YaraRulesBaseModel:
      type: object
      properties:
        useRules:
          type: boolean
      additionalProperties: false
    YaraRulesModel:
      type: object
      properties:
        rules:
          type: string
          nullable: true
        useRules:
          type: boolean
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: Please insert JWT with Bearer into field
      name: Authorization
      in: header
