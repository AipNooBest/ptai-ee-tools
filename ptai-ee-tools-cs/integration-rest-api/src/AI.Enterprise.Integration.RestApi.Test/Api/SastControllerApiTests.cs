/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using AI.Enterprise.Integration.RestApi.Client;
using AI.Enterprise.Integration.RestApi.Api;
using AI.Enterprise.Integration.RestApi.Model;

namespace AI.Enterprise.Integration.RestApi.Test
{
    /// <summary>
    ///  Class for testing SastControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SastControllerApiTests
    {
        private SastControllerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SastControllerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SastControllerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SastControllerApi
            //Assert.IsInstanceOf(typeof(SastControllerApi), instance);
        }

        
        /// <summary>
        /// Test GetJobResultUsingGET
        /// </summary>
        [Test]
        public void GetJobResultUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int buildNumber = null;
            //string artifact = null;
            //var response = instance.GetJobResultUsingGET(buildNumber, artifact);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetJobResultsUsingGET
        /// </summary>
        [Test]
        public void GetJobResultsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int buildNumber = null;
            //var response = instance.GetJobResultsUsingGET(buildNumber);
            //Assert.IsInstanceOf(typeof(List<string>), response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetJobStateUsingGET
        /// </summary>
        [Test]
        public void GetJobStateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int buildNumber = null;
            //int startPos = null;
            //var response = instance.GetJobStateUsingGET(buildNumber, startPos);
            //Assert.IsInstanceOf(typeof(JobState), response, "response is JobState");
        }
        
        /// <summary>
        /// Test ScanJsonManagedUsingPOST
        /// </summary>
        [Test]
        public void ScanJsonManagedUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectName = null;
            //string node = null;
            //string settings = null;
            //string policy = null;
            //var response = instance.ScanJsonManagedUsingPOST(projectName, node, settings, policy);
            //Assert.IsInstanceOf(typeof(int), response, "response is int");
        }
        
        /// <summary>
        /// Test ScanUiManagedUsingPOST
        /// </summary>
        [Test]
        public void ScanUiManagedUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectName = null;
            //string node = null;
            //var response = instance.ScanUiManagedUsingPOST(projectName, node);
            //Assert.IsInstanceOf(typeof(int), response, "response is int");
        }
        
        /// <summary>
        /// Test UploadUsingPOST
        /// </summary>
        [Test]
        public void UploadUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object current = null;
            //System.IO.Stream file = null;
            //Object project = null;
            //Object total = null;
            //var response = instance.UploadUsingPOST(current, file, project, total);
            //Assert.IsInstanceOf(typeof(ResponseEntity), response, "response is ResponseEntity");
        }
        
    }

}
