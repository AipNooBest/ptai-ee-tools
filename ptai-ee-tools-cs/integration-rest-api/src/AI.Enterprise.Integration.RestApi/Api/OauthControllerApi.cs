/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AI.Enterprise.Integration.RestApi.Client;
using AI.Enterprise.Integration.RestApi.Model;

namespace AI.Enterprise.Integration.RestApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOauthControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Login user by client id / secret (those are passed as a basic auth fields) and login / password or refresh-token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>JwtResponse</returns>
        JwtResponse GetJwtTokenUsingPOST (string username = default(string), string password = default(string), string refreshToken = default(string), string grantType = default(string));

        /// <summary>
        /// Login user by client id / secret (those are passed as a basic auth fields) and login / password or refresh-token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>ApiResponse of JwtResponse</returns>
        ApiResponse<JwtResponse> GetJwtTokenUsingPOSTWithHttpInfo (string username = default(string), string password = default(string), string refreshToken = default(string), string grantType = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Login user by client id / secret (those are passed as a basic auth fields) and login / password or refresh-token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>Task of JwtResponse</returns>
        System.Threading.Tasks.Task<JwtResponse> GetJwtTokenUsingPOSTAsync (string username = default(string), string password = default(string), string refreshToken = default(string), string grantType = default(string));

        /// <summary>
        /// Login user by client id / secret (those are passed as a basic auth fields) and login / password or refresh-token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>Task of ApiResponse (JwtResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JwtResponse>> GetJwtTokenUsingPOSTAsyncWithHttpInfo (string username = default(string), string password = default(string), string refreshToken = default(string), string grantType = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OauthControllerApi : IOauthControllerApi
    {
        private AI.Enterprise.Integration.RestApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OauthControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OauthControllerApi(String basePath)
        {
            this.Configuration = new AI.Enterprise.Integration.RestApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AI.Enterprise.Integration.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OauthControllerApi"/> class
        /// </summary>
        /// <returns></returns>
        public OauthControllerApi()
        {
            this.Configuration = AI.Enterprise.Integration.RestApi.Client.Configuration.Default;

            ExceptionFactory = AI.Enterprise.Integration.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OauthControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OauthControllerApi(AI.Enterprise.Integration.RestApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AI.Enterprise.Integration.RestApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AI.Enterprise.Integration.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AI.Enterprise.Integration.RestApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AI.Enterprise.Integration.RestApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Login user by client id / secret (those are passed as a basic auth fields) and login / password or refresh-token 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>JwtResponse</returns>
        public JwtResponse GetJwtTokenUsingPOST (string username = default(string), string password = default(string), string refreshToken = default(string), string grantType = default(string))
        {
             ApiResponse<JwtResponse> localVarResponse = GetJwtTokenUsingPOSTWithHttpInfo(username, password, refreshToken, grantType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login user by client id / secret (those are passed as a basic auth fields) and login / password or refresh-token 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>ApiResponse of JwtResponse</returns>
        public ApiResponse<JwtResponse> GetJwtTokenUsingPOSTWithHttpInfo (string username = default(string), string password = default(string), string refreshToken = default(string), string grantType = default(string))
        {

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJwtTokenUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JwtResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JwtResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JwtResponse)));
        }

        /// <summary>
        /// Login user by client id / secret (those are passed as a basic auth fields) and login / password or refresh-token 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>Task of JwtResponse</returns>
        public async System.Threading.Tasks.Task<JwtResponse> GetJwtTokenUsingPOSTAsync (string username = default(string), string password = default(string), string refreshToken = default(string), string grantType = default(string))
        {
             ApiResponse<JwtResponse> localVarResponse = await GetJwtTokenUsingPOSTAsyncWithHttpInfo(username, password, refreshToken, grantType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login user by client id / secret (those are passed as a basic auth fields) and login / password or refresh-token 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>Task of ApiResponse (JwtResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JwtResponse>> GetJwtTokenUsingPOSTAsyncWithHttpInfo (string username = default(string), string password = default(string), string refreshToken = default(string), string grantType = default(string))
        {

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJwtTokenUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JwtResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JwtResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JwtResponse)));
        }

    }
}
