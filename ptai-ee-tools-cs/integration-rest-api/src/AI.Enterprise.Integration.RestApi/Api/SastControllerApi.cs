/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AI.Enterprise.Integration.RestApi.Client;
using AI.Enterprise.Integration.RestApi.Model;

namespace AI.Enterprise.Integration.RestApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISastControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// getJobResult
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">buildNumber</param>
        /// <param name="artifact">artifact</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetJobResultUsingGET (int buildNumber, string artifact);

        /// <summary>
        /// getJobResult
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">buildNumber</param>
        /// <param name="artifact">artifact</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetJobResultUsingGETWithHttpInfo (int buildNumber, string artifact);
        /// <summary>
        /// getJobResults
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetJobResultsUsingGET (int buildNumber);

        /// <summary>
        /// getJobResults
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetJobResultsUsingGETWithHttpInfo (int buildNumber);
        /// <summary>
        /// getJobState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <param name="startPos">start-pos</param>
        /// <returns>JobState</returns>
        JobState GetJobStateUsingGET (int buildNumber, int startPos);

        /// <summary>
        /// getJobState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <param name="startPos">start-pos</param>
        /// <returns>ApiResponse of JobState</returns>
        ApiResponse<JobState> GetJobStateUsingGETWithHttpInfo (int buildNumber, int startPos);
        /// <summary>
        /// scanJsonManaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <param name="settings">settings</param>
        /// <param name="policy">policy</param>
        /// <returns>int</returns>
        int ScanJsonManagedUsingPOST (string projectName, string node, string settings, string policy);

        /// <summary>
        /// scanJsonManaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <param name="settings">settings</param>
        /// <param name="policy">policy</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> ScanJsonManagedUsingPOSTWithHttpInfo (string projectName, string node, string settings, string policy);
        /// <summary>
        /// scanUiManaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <returns>int</returns>
        int ScanUiManagedUsingPOST (string projectName, string node);

        /// <summary>
        /// scanUiManaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> ScanUiManagedUsingPOSTWithHttpInfo (string projectName, string node);
        /// <summary>
        /// upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">current</param>
        /// <param name="file">file</param>
        /// <param name="project">project</param>
        /// <param name="total">total</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity UploadUsingPOST (Object current, System.IO.Stream file, Object project, Object total);

        /// <summary>
        /// upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">current</param>
        /// <param name="file">file</param>
        /// <param name="project">project</param>
        /// <param name="total">total</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> UploadUsingPOSTWithHttpInfo (Object current, System.IO.Stream file, Object project, Object total);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// getJobResult
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">buildNumber</param>
        /// <param name="artifact">artifact</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetJobResultUsingGETAsync (int buildNumber, string artifact);

        /// <summary>
        /// getJobResult
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">buildNumber</param>
        /// <param name="artifact">artifact</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetJobResultUsingGETAsyncWithHttpInfo (int buildNumber, string artifact);
        /// <summary>
        /// getJobResults
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetJobResultsUsingGETAsync (int buildNumber);

        /// <summary>
        /// getJobResults
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetJobResultsUsingGETAsyncWithHttpInfo (int buildNumber);
        /// <summary>
        /// getJobState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <param name="startPos">start-pos</param>
        /// <returns>Task of JobState</returns>
        System.Threading.Tasks.Task<JobState> GetJobStateUsingGETAsync (int buildNumber, int startPos);

        /// <summary>
        /// getJobState
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <param name="startPos">start-pos</param>
        /// <returns>Task of ApiResponse (JobState)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobState>> GetJobStateUsingGETAsyncWithHttpInfo (int buildNumber, int startPos);
        /// <summary>
        /// scanJsonManaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <param name="settings">settings</param>
        /// <param name="policy">policy</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> ScanJsonManagedUsingPOSTAsync (string projectName, string node, string settings, string policy);

        /// <summary>
        /// scanJsonManaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <param name="settings">settings</param>
        /// <param name="policy">policy</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> ScanJsonManagedUsingPOSTAsyncWithHttpInfo (string projectName, string node, string settings, string policy);
        /// <summary>
        /// scanUiManaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> ScanUiManagedUsingPOSTAsync (string projectName, string node);

        /// <summary>
        /// scanUiManaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> ScanUiManagedUsingPOSTAsyncWithHttpInfo (string projectName, string node);
        /// <summary>
        /// upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">current</param>
        /// <param name="file">file</param>
        /// <param name="project">project</param>
        /// <param name="total">total</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> UploadUsingPOSTAsync (Object current, System.IO.Stream file, Object project, Object total);

        /// <summary>
        /// upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">current</param>
        /// <param name="file">file</param>
        /// <param name="project">project</param>
        /// <param name="total">total</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> UploadUsingPOSTAsyncWithHttpInfo (Object current, System.IO.Stream file, Object project, Object total);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SastControllerApi : ISastControllerApi
    {
        private AI.Enterprise.Integration.RestApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SastControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SastControllerApi(String basePath)
        {
            this.Configuration = new AI.Enterprise.Integration.RestApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AI.Enterprise.Integration.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SastControllerApi"/> class
        /// </summary>
        /// <returns></returns>
        public SastControllerApi()
        {
            this.Configuration = AI.Enterprise.Integration.RestApi.Client.Configuration.Default;

            ExceptionFactory = AI.Enterprise.Integration.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SastControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SastControllerApi(AI.Enterprise.Integration.RestApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AI.Enterprise.Integration.RestApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AI.Enterprise.Integration.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AI.Enterprise.Integration.RestApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AI.Enterprise.Integration.RestApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// getJobResult 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">buildNumber</param>
        /// <param name="artifact">artifact</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetJobResultUsingGET (int buildNumber, string artifact)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetJobResultUsingGETWithHttpInfo(buildNumber, artifact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getJobResult 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">buildNumber</param>
        /// <param name="artifact">artifact</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetJobResultUsingGETWithHttpInfo (int buildNumber, string artifact)
        {
            // verify the required parameter 'buildNumber' is set
            if (buildNumber == null)
                throw new ApiException(400, "Missing required parameter 'buildNumber' when calling SastControllerApi->GetJobResultUsingGET");
            // verify the required parameter 'artifact' is set
            if (artifact == null)
                throw new ApiException(400, "Missing required parameter 'artifact' when calling SastControllerApi->GetJobResultUsingGET");

            var localVarPath = "/api/sast/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "buildNumber", buildNumber)); // query parameter
            if (artifact != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "artifact", artifact)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobResultUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// getJobResult 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">buildNumber</param>
        /// <param name="artifact">artifact</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetJobResultUsingGETAsync (int buildNumber, string artifact)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetJobResultUsingGETAsyncWithHttpInfo(buildNumber, artifact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getJobResult 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">buildNumber</param>
        /// <param name="artifact">artifact</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetJobResultUsingGETAsyncWithHttpInfo (int buildNumber, string artifact)
        {
            // verify the required parameter 'buildNumber' is set
            if (buildNumber == null)
                throw new ApiException(400, "Missing required parameter 'buildNumber' when calling SastControllerApi->GetJobResultUsingGET");
            // verify the required parameter 'artifact' is set
            if (artifact == null)
                throw new ApiException(400, "Missing required parameter 'artifact' when calling SastControllerApi->GetJobResultUsingGET");

            var localVarPath = "/api/sast/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "buildNumber", buildNumber)); // query parameter
            if (artifact != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "artifact", artifact)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobResultUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// getJobResults 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetJobResultsUsingGET (int buildNumber)
        {
             ApiResponse<List<string>> localVarResponse = GetJobResultsUsingGETWithHttpInfo(buildNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getJobResults 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetJobResultsUsingGETWithHttpInfo (int buildNumber)
        {
            // verify the required parameter 'buildNumber' is set
            if (buildNumber == null)
                throw new ApiException(400, "Missing required parameter 'buildNumber' when calling SastControllerApi->GetJobResultsUsingGET");

            var localVarPath = "/api/sast/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "build-number", buildNumber)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobResultsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// getJobResults 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetJobResultsUsingGETAsync (int buildNumber)
        {
             ApiResponse<List<string>> localVarResponse = await GetJobResultsUsingGETAsyncWithHttpInfo(buildNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getJobResults 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetJobResultsUsingGETAsyncWithHttpInfo (int buildNumber)
        {
            // verify the required parameter 'buildNumber' is set
            if (buildNumber == null)
                throw new ApiException(400, "Missing required parameter 'buildNumber' when calling SastControllerApi->GetJobResultsUsingGET");

            var localVarPath = "/api/sast/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "build-number", buildNumber)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobResultsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// getJobState 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <param name="startPos">start-pos</param>
        /// <returns>JobState</returns>
        public JobState GetJobStateUsingGET (int buildNumber, int startPos)
        {
             ApiResponse<JobState> localVarResponse = GetJobStateUsingGETWithHttpInfo(buildNumber, startPos);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getJobState 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <param name="startPos">start-pos</param>
        /// <returns>ApiResponse of JobState</returns>
        public ApiResponse<JobState> GetJobStateUsingGETWithHttpInfo (int buildNumber, int startPos)
        {
            // verify the required parameter 'buildNumber' is set
            if (buildNumber == null)
                throw new ApiException(400, "Missing required parameter 'buildNumber' when calling SastControllerApi->GetJobStateUsingGET");
            // verify the required parameter 'startPos' is set
            if (startPos == null)
                throw new ApiException(400, "Missing required parameter 'startPos' when calling SastControllerApi->GetJobStateUsingGET");

            var localVarPath = "/api/sast/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "build-number", buildNumber)); // query parameter
            if (startPos != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-pos", startPos)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobStateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobState)));
        }

        /// <summary>
        /// getJobState 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <param name="startPos">start-pos</param>
        /// <returns>Task of JobState</returns>
        public async System.Threading.Tasks.Task<JobState> GetJobStateUsingGETAsync (int buildNumber, int startPos)
        {
             ApiResponse<JobState> localVarResponse = await GetJobStateUsingGETAsyncWithHttpInfo(buildNumber, startPos);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getJobState 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildNumber">build-number</param>
        /// <param name="startPos">start-pos</param>
        /// <returns>Task of ApiResponse (JobState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobState>> GetJobStateUsingGETAsyncWithHttpInfo (int buildNumber, int startPos)
        {
            // verify the required parameter 'buildNumber' is set
            if (buildNumber == null)
                throw new ApiException(400, "Missing required parameter 'buildNumber' when calling SastControllerApi->GetJobStateUsingGET");
            // verify the required parameter 'startPos' is set
            if (startPos == null)
                throw new ApiException(400, "Missing required parameter 'startPos' when calling SastControllerApi->GetJobStateUsingGET");

            var localVarPath = "/api/sast/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "build-number", buildNumber)); // query parameter
            if (startPos != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start-pos", startPos)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobStateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobState)));
        }

        /// <summary>
        /// scanJsonManaged 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <param name="settings">settings</param>
        /// <param name="policy">policy</param>
        /// <returns>int</returns>
        public int ScanJsonManagedUsingPOST (string projectName, string node, string settings, string policy)
        {
             ApiResponse<int> localVarResponse = ScanJsonManagedUsingPOSTWithHttpInfo(projectName, node, settings, policy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// scanJsonManaged 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <param name="settings">settings</param>
        /// <param name="policy">policy</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> ScanJsonManagedUsingPOSTWithHttpInfo (string projectName, string node, string settings, string policy)
        {
            // verify the required parameter 'projectName' is set
            if (projectName == null)
                throw new ApiException(400, "Missing required parameter 'projectName' when calling SastControllerApi->ScanJsonManagedUsingPOST");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling SastControllerApi->ScanJsonManagedUsingPOST");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling SastControllerApi->ScanJsonManagedUsingPOST");
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new ApiException(400, "Missing required parameter 'policy' when calling SastControllerApi->ScanJsonManagedUsingPOST");

            var localVarPath = "/api/sast/scan-json-managed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project-name", projectName)); // query parameter
            if (node != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "node", node)); // query parameter
            if (settings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "settings", settings)); // query parameter
            if (policy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "policy", policy)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanJsonManagedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// scanJsonManaged 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <param name="settings">settings</param>
        /// <param name="policy">policy</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> ScanJsonManagedUsingPOSTAsync (string projectName, string node, string settings, string policy)
        {
             ApiResponse<int> localVarResponse = await ScanJsonManagedUsingPOSTAsyncWithHttpInfo(projectName, node, settings, policy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// scanJsonManaged 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <param name="settings">settings</param>
        /// <param name="policy">policy</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> ScanJsonManagedUsingPOSTAsyncWithHttpInfo (string projectName, string node, string settings, string policy)
        {
            // verify the required parameter 'projectName' is set
            if (projectName == null)
                throw new ApiException(400, "Missing required parameter 'projectName' when calling SastControllerApi->ScanJsonManagedUsingPOST");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling SastControllerApi->ScanJsonManagedUsingPOST");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling SastControllerApi->ScanJsonManagedUsingPOST");
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new ApiException(400, "Missing required parameter 'policy' when calling SastControllerApi->ScanJsonManagedUsingPOST");

            var localVarPath = "/api/sast/scan-json-managed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project-name", projectName)); // query parameter
            if (node != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "node", node)); // query parameter
            if (settings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "settings", settings)); // query parameter
            if (policy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "policy", policy)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanJsonManagedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// scanUiManaged 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <returns>int</returns>
        public int ScanUiManagedUsingPOST (string projectName, string node)
        {
             ApiResponse<int> localVarResponse = ScanUiManagedUsingPOSTWithHttpInfo(projectName, node);
             return localVarResponse.Data;
        }

        /// <summary>
        /// scanUiManaged 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> ScanUiManagedUsingPOSTWithHttpInfo (string projectName, string node)
        {
            // verify the required parameter 'projectName' is set
            if (projectName == null)
                throw new ApiException(400, "Missing required parameter 'projectName' when calling SastControllerApi->ScanUiManagedUsingPOST");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling SastControllerApi->ScanUiManagedUsingPOST");

            var localVarPath = "/api/sast/scan-ui-managed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project-name", projectName)); // query parameter
            if (node != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "node", node)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanUiManagedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// scanUiManaged 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> ScanUiManagedUsingPOSTAsync (string projectName, string node)
        {
             ApiResponse<int> localVarResponse = await ScanUiManagedUsingPOSTAsyncWithHttpInfo(projectName, node);
             return localVarResponse.Data;

        }

        /// <summary>
        /// scanUiManaged 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName">project-name</param>
        /// <param name="node">node</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> ScanUiManagedUsingPOSTAsyncWithHttpInfo (string projectName, string node)
        {
            // verify the required parameter 'projectName' is set
            if (projectName == null)
                throw new ApiException(400, "Missing required parameter 'projectName' when calling SastControllerApi->ScanUiManagedUsingPOST");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling SastControllerApi->ScanUiManagedUsingPOST");

            var localVarPath = "/api/sast/scan-ui-managed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project-name", projectName)); // query parameter
            if (node != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "node", node)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanUiManagedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// upload 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">current</param>
        /// <param name="file">file</param>
        /// <param name="project">project</param>
        /// <param name="total">total</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity UploadUsingPOST (Object current, System.IO.Stream file, Object project, Object total)
        {
             ApiResponse<ResponseEntity> localVarResponse = UploadUsingPOSTWithHttpInfo(current, file, project, total);
             return localVarResponse.Data;
        }

        /// <summary>
        /// upload 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">current</param>
        /// <param name="file">file</param>
        /// <param name="project">project</param>
        /// <param name="total">total</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse<ResponseEntity> UploadUsingPOSTWithHttpInfo (Object current, System.IO.Stream file, Object project, Object total)
        {
            // verify the required parameter 'current' is set
            if (current == null)
                throw new ApiException(400, "Missing required parameter 'current' when calling SastControllerApi->UploadUsingPOST");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SastControllerApi->UploadUsingPOST");
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling SastControllerApi->UploadUsingPOST");
            // verify the required parameter 'total' is set
            if (total == null)
                throw new ApiException(400, "Missing required parameter 'total' when calling SastControllerApi->UploadUsingPOST");

            var localVarPath = "/api/sast/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (current != null) localVarFormParams.Add("current", this.Configuration.ApiClient.ParameterToString(current)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (project != null) localVarFormParams.Add("project", this.Configuration.ApiClient.ParameterToString(project)); // form parameter
            if (total != null) localVarFormParams.Add("total", this.Configuration.ApiClient.ParameterToString(total)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// upload 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">current</param>
        /// <param name="file">file</param>
        /// <param name="project">project</param>
        /// <param name="total">total</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> UploadUsingPOSTAsync (Object current, System.IO.Stream file, Object project, Object total)
        {
             ApiResponse<ResponseEntity> localVarResponse = await UploadUsingPOSTAsyncWithHttpInfo(current, file, project, total);
             return localVarResponse.Data;

        }

        /// <summary>
        /// upload 
        /// </summary>
        /// <exception cref="AI.Enterprise.Integration.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">current</param>
        /// <param name="file">file</param>
        /// <param name="project">project</param>
        /// <param name="total">total</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> UploadUsingPOSTAsyncWithHttpInfo (Object current, System.IO.Stream file, Object project, Object total)
        {
            // verify the required parameter 'current' is set
            if (current == null)
                throw new ApiException(400, "Missing required parameter 'current' when calling SastControllerApi->UploadUsingPOST");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SastControllerApi->UploadUsingPOST");
            // verify the required parameter 'project' is set
            if (project == null)
                throw new ApiException(400, "Missing required parameter 'project' when calling SastControllerApi->UploadUsingPOST");
            // verify the required parameter 'total' is set
            if (total == null)
                throw new ApiException(400, "Missing required parameter 'total' when calling SastControllerApi->UploadUsingPOST");

            var localVarPath = "/api/sast/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (current != null) localVarFormParams.Add("current", this.Configuration.ApiClient.ParameterToString(current)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (project != null) localVarFormParams.Add("project", this.Configuration.ApiClient.ParameterToString(project)); // form parameter
            if (total != null) localVarFormParams.Add("total", this.Configuration.ApiClient.ParameterToString(total)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

    }
}
