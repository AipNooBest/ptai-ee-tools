@startuml

class CxSonarConstants {
  +RULES_REPOSITORY_PREFIX = "checkmarx.rules."
  +CX_SONAR_ORIGIN = "Sonar"
  +CANCEL_MESSAGE = "NOTE: Checkmarx scan is canceled"
}

interface Metrics

class SastMetrics {
  {Static} +CX_SAST_DOMAIN = CoreMetrics.DOMAIN_SECURITY
  {Static} +SAST_BASE_KEY = "cx.sast.result"
  {Static} +Metric<Integer> SAST_HIGH_VULNERABILITIES
  {Static} +Metric<Integer> SAST_MEDIUM_VULNERABILITIES
  {Static} +Metric<Integer> SAST_LOW_VULNERABILITIES
  {Static} +Metric<Integer> SAST_TOTAL_VULNERABILITIES
  {Static} +Metric<Integer> SAST_NEW_HIGH_VULNERABILITIES
  {Static} +Metric<Integer> SAST_NEW_MEDIUM_VULNERABILITIES
  {Static} +Metric<Integer> SAST_NEW_LOW_VULNERABILITIES
  {Static} +Metric<Integer> SAST_TOTAL_NEW_VULNERABILITIES
  {Static} +Metric<Integer> SONAR_PROJECT_HAVE_SAST_RESULTS
  {Static} +Metric<String> SAST_SCAN_DETAILS
  {Static} +Metric<String> SAST_SCAN_QUERIES
  +List<Metric> getMetrics()
}

SastMetrics ..|> Metrics

class OsaMetrics {
  {Static} +CX_OSA_DOMAIN = "Checkmarx OSA Security"
  {Static} +OSA_BASE_KEY = "cx.osa.result"
  {Static} +Metric<Integer> OSA_HIGH_VULNERABILITIES
  {Static} +Metric<Integer> OSA_MEDIUM_VULNERABILITIES
  {Static} +Metric<Integer> OSA_LOW_VULNERABILITIES
  {Static} +Metric<Integer> OSA_TOTAL_VULNERABILITIES
  {Static} +Metric<String> OSA_SCAN_DETAILS
  {Static} +Metric<String> OSA_LAST_SCAN_STATUS
  +List<Metric> getMetrics()
}

OsaMetrics ..|> Metrics

class CxProperties {
  {Static} +CXPROJECT_KEY = "checkmarx.server.project_name.secured"
  {Static} +CX_CREDENTIALS_KEY = "checkmarx.server.credentials.secured"
  {Static} +CX_REMEDIATION_EFFORT = "checkmarx.server.remediation"
  {Static} +List<PropertyDefinition> getProperties()
}

class CxReportToSonarReport {
  +HashMap<String, List<CxResultToSonarResult>> resultsMappedByFileDir
}

class CxResultsAdapter {
  {Static} CxReportToSonarReport adaptCxXmlResultsForSonar(CxXMLResults results)
}


interface Sensor

class CheckmarxSensor {

}

CheckmarxSensor ..|> Sensor
CheckmarxSensor --> "sastResultsCollector" SastResultsCollector

class SastResultsCollector {
  +collectVulnerabilitiesAndSaveToMetrics(SensorContext context, CxReportToSonarReport cxReport)
}

interface MeasureComputer

class ComputeSastMeasures {

}

ComputeSastMeasures ..|> MeasureComputer

interface RulesDefinition

class CxRulesDefinition {
  -String getLanguageRulesPath(CXProgrammingLanguage language)
  +define(Context context)
}

note top of CxRulesDefinition
Loads SAST rules (vulnerability types)
from *-rules.xml files.
See here: http://javadocs.sonarsource.org/6.7/apidocs/org/sonar/api/server/rule/RulesDefinitionXmlLoader.html
end note

class rulesXml {

}

class rulesRuleXml {
  +key
  +name
  +description
  +severity
  +tag
  +type
  +remediationFunction
  +remediationFunctionGapMultiplier
}

rulesXml --> "rules[]" rulesRuleXml

CxRulesDefinition ..|> RulesDefinition
CxRulesDefinition ..|> rulesXml

class CxProfilesConstants {
    {Static} +PROFILE_PATH_TEMPLATE = "com/checkmarx/sonar/profiles/%s-profile.xml"
}

class CxJavaProfile {
  +RulesProfile createProfile(ValidationMessages validation)
}
note top of CxJavaProfile
Loads SAST rules (vulnerability types)
that are correspond to Java language
from *-profile.xml files.
end note

class profileXml {
  +name
  +language
}

class "profileRuleXml" {
  +repositoryKey = "checkmarx.rules.java"
  +key
}
profileRuleXml ..> rulesRuleXml

profileXml --> "rules[]" "profileRuleXml"
ruleXml ..> CxSonarConstants

CxJavaProfile --|> ProfileDefinition
CxJavaProfile --> profileXml

class CXProgrammingLanguage {
  -String name
  -String sonarName
  -int languageId
  -String sonarRuleRepository
}

interface PageDefinition

class CxPluginPageDefinition {
  +define(Context context)
}

class "checkmarx/project_configuration" {
  +name = "Checkmarx"
  +admin = Boolean.TRUE
}

class "checkmarx/cx_report" {
  +name = "Checkmarx Report"
}

CxPluginPageDefinition ..> "checkmarx/project_configuration"
CxPluginPageDefinition ..> "checkmarx/cx_report"

note top of CxPluginPageDefinition
Adds project_configuration
and cx_report
end note
CxPluginPageDefinition --|> PageDefinition

class CheckmarxPlugin {

}

CheckmarxPlugin ..> CxJavaProfile
CheckmarxPlugin ..> SastMetrics
CheckmarxPlugin ..> ComputeSastMeasures
CheckmarxPlugin ..> CheckmarxSensor
CheckmarxPlugin ..> CxPluginPageDefinition
CheckmarxPlugin ..> CxConfigRestEndPoint
CheckmarxPlugin ..> CxRulesDefinition

interface WebService

class CxConfigRestEndPoint {
  +connect()
  +projects()
  +clean_connection()
}

CxConfigRestEndPoint ..|> WebService

class CxShragaClient

CxConfigRestEndPoint --> "shraga" CxShragaClient

"checkmarx/project_configuration" ..> CxConfigRestEndPoint

class CxXMLResults {
  +String initiatorName
  +String owner
  +String scanId
  +String projectId
  +String projectName
  +String teamFullPathOnReportDate
  +String deepLink
  +String scanStart
  +String preset
  +String scanTime
  +long linesOfCodeScanned
  +long filesScanned
  +String reportCreationTime
  +String team
  +String checkmarxVersion
  +String scanComments
  +String scanType
  +String sourceOrigin
  +String visibility
}

CxXMLResults --> "query[]" Query

class Query {
  +String id
  +String categories
  +String cweId
  +String name
  +String group
  +String severity
  +String language
  +String languageHash
  +String languageChangeDate
  +int severityIndex
  +String queryPath
  +String queryVersionCode
}

Query --> "result[]" Result

class Result {
  +String nodeId
  +String fileName
  +String status
  +String line
  +String column
  +String falsePositive
  +String severity
  +String assignToUser
  +int state
  +String remark
  +String deepLink
  +String severityIndex
}

Result --> "path" Path

class Path {
  +String resultId
  +String pathId
  +String similarityId
}
Path --> "pathNode[]" PathNode

class PathNode {
  +String fileName
  +int line
  +int column
  +String nodeId
  +String name
  +String type
  +int length
}
PathNode --> "snippet" Snippet

class Snippet
Snippet --> "line" Line

class Line {
  +String number
  +String code
}

class CxResultToSonarResult
CxResultToSonarResult --> "query" Query
CxResultToSonarResult --> "resultData" Result
CxResultToSonarResult --> "nodeToMarkOnFile" PathNode

CxReportToSonarReport ..> CxResultToSonarResult


@enduml
