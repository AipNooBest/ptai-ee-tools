<!--
Removed dropdownListBlock's lazy attribute value to avoid lazy render: during
lazy render unselected descriptor fields aren't rendered. That means that during
initial page load existing components with @RelativePath dependencies will fail
for subscribe for control value changes (browser console will show "Unable to
find nearby [path]").
For example, report template type combobox is to be filled with values being read
from PT AI server. That server may be defined both as global- or task-based setting,
so doFillXXX method's parameters should look like this:
    @RelativePath("../..") @QueryParameter("selectedConfig") final String selectedConfig, // Config type (i.e. descriptor displayName)
    @RelativePath("../../config/serverSettings") @QueryParameter("serverUrl") final String serverUrl, // Task-based config server URL
    @RelativePath("../../config/serverSettings") @QueryParameter("serverCredentialsId") final String serverCredentialsId, // Task-based config server credential
    @RelativePath("../../config") @QueryParameter("configName") final String configName) // Global config name
Let's imagine that job is being set up for a global PT AI configuration "PT". If lazy
render is used then Jenkins will not render task-based config field names, those only
will appear after first config type change. But controls are bind to change event
only at the page load event, so they will fail to monitor serverUrl and
serverCredentialsId changes.
So we need to disable lazy render by removing lazy="descriptor,it,${capture} from
dropdownListBlock node
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:pt="/com/ptsecurity/appsec/ai/ee/utils/ci/integration/plugin/jenkins/ui">
  <st:documentation>
    Renders a single &lt;select> control for choosing a Describable.
    Depending on the currently selected value, its config.jelly will be
    rendered below &lt;select, allowing the user to configure Describable.

    <st:attribute name="id" />
    <st:attribute name="field" use="required">
      form field name. Used for databinding.
    </st:attribute>
    <st:attribute name="title" use="required">
      Human readable title of this control.
    </st:attribute>
    <st:attribute name="descriptors">
      Collection that lists up all the valid candidate descriptors.
      If unspecified, inferred from the type of the field.
    </st:attribute>
    <st:attribute name="default">
      If specified, this will be chosen as the default value in case the current selection is null. The default can be an specific instance or a descriptor e.g. 
      ${descriptor.defaultSettingsProvider} or ${descriptor.defaultSettingsProvider.descriptor}. In the later case, the from input fields will be empty.
    </st:attribute>
    <st:attribute name="capture">
      Config fragments from descriptors are rendered lazily by default, which means
      variables seen in the caller aren't visible to them. This attribute allows you
      to nominate additional variables and their values to be captured for descriptors.
    </st:attribute>
  </st:documentation>
  <f:prepareDatabinding /> 
  <j:set target="${attrs}" property="descriptors" value="${attrs.descriptors ?: descriptor.getPropertyType(instance,attrs.field).getApplicableDescriptors()}" />

  <pt:dropdownList id="${attrs.id}" name="${attrs.field}" title="${attrs.title}" help="${descriptor.getHelpFile(attrs.field)}">
    <d:invokeBody />

    <j:set var="current" value="${instance[attrs.field]}"/>
    <j:set var="current" value="${current!=null ? current : (default.descriptor!=null ? default : null)}"/>
    <j:set var="capture" value="${attrs.capture?:''}" />
    <j:forEach var="descriptor" items="${attrs.descriptors}" varStatus="loop">
      <f:dropdownListBlock value="${loop.index}" title="${descriptor.displayName}"
        selected="${current.descriptor==descriptor || (current==null and descriptor==attrs.default)}" staplerClass="${descriptor.clazz.name}">
        <l:ajax>
          <j:set var="instance" value="${current.descriptor==descriptor ? current : null}" />
          <st:include from="${descriptor}" page="${descriptor.configPage}" optional="true" />
        </l:ajax>
      </f:dropdownListBlock>
    </j:forEach>
  </pt:dropdownList>
</j:jelly>
